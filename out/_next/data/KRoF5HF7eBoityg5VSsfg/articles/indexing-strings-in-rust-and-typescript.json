{"pageProps":{"post":{"title":"Indexing Strings in Rust and TypeScript: A Case Study of String","publishedAt":"December 28, 2021","description":"Text is essential in programming languages. String is the Rust's and JavaScript's definition to process text in written languages around the world. Through the simple concept of string indexing, we'll discuss how Rust and JavaScript process strings and how they handle the nuances in strings such as grapheme, or even emojis.","cover":"/optimized/articles/indexing-strings-in-rust/hero.png","category":"Rust","coverWidth":"1411","coverHeight":"682","body":{"raw":"\n## TL;DR\n\n- ü™¢ Accessing characters in strings with index is not compilable in Rust.\n- üé∏ We'll discuss how Rust think about strings.\n- ü§ñ We'll discuss how JavaScript handles strings.\n- üßë‚Äçüî¨ We'll compare a classic algorithm `is_palindrome` in Rust and TypeScript.\n\n---\n\nText is essential in programming languages.\nString is the Rust's and JavaScript's definition to process text in written languages around the world.\nThrough the simple concept of string indexing, we'll discuss how Rust and JavaScript process strings and how they handle the nuances in strings such as grapheme, or even emojis.\n\nLet's use a classic algorithm `is_palindrome` to introduce the concept of string indexing.\n\n## `is_palindrome` in Rust\n\nA [palindrome](https://en.wikipedia.org/wiki/Palindrome), in a very general way of explaining it, is a string that reads the same forward and backward.\n\"**Ana**\" is a palindrome, \"**A dog! A panic in a pagoda!**\" is a palindrome, or even \"**02/02/2020**\" is a palindrome.\n\nFor the purpose of this article, we'll use a more narrowed definition to keep the algorithm simple.\nA palindrome here is defined as a \"continuous sequence of lowercase ASCII characters without whitespace\".\n\nOne intuitive approach would be using two pointers.\nOne starts from the beginning of the given string moving toward the end, and the other from the end toward the beginning.\nWhile moving the pointers, compare the pointing characters.\nThe given string is a palindrome if all the comparisons are equal. Like this:\n\n```rust\n// ‚ùå It won't compile\nfn is_palindrome(str: String) -> bool {\n  //        lp       rp\n  //        |        |\n  //        v ‚Üí    ‚Üê v\n  // str = \"aabbccbbaa\"\n  let mut lp = 0;\n  let mut rp = str.len() - 1;\n\n  while lp < rp {\n    if str[lp] != str[rp] {\n    // ^^^^^^^ `String` cannot be indexed by `usize`\n      return false;\n    }\n    lp += 1;\n    rp -= 1;\n  }\n\n  true\n}\n```\n\nIf you try to compile the program, you'll notice that the Rust compiler won't let us access characters by index.\nIt's a very interesting constraint because many languages like JavaScript, Go, and Python offer the feature.\n\nAs we dig a little deeper, there are some string methods from the standard library like [`chars()`](https://doc.rust-lang.org/stable/std/string/struct.String.html#method.chars) to access the characters in a string.\n`chars()` returns an iterator over the `char`s of a string slice. So we'll have to iterate through a string slice to access characters by index.\nLike this:\n\n```rust\nlet left = str.as_str().chars().nth(lp).unwrap();\n```\n\nThe simple task of accessing a character in a string has the time complexity of `O(n)` instead of `O(1)`.\n\nWhy is that?\n\n## Rust's Strings Are in Unicode And UTF-8 Encoded\n\nWe can find the [internal representaion](https://doc.rust-lang.org/book/ch08-02-strings.html#internal-representation) of Rust's String from the [official Rust book](https://doc.rust-lang.org/book/).\n\n> A String is a wrapper over a `Vec<u8>`.\n\nFor strings in [ASCII](https://en.wikipedia.org/wiki/ASCII), each character is represented by 1 byte encoded in [UTF-8](https://en.wikipedia.org/wiki/UTF-8).\nHowever, for strings in other written languages, like [\"‡§®‡§Æ‡§∏‡•ç‡§§‡•á\" in the Devanagari script](https://doc.rust-lang.org/book/ch08-02-strings.html#bytes-and-scalar-values-and-grapheme-clusters-oh-my) from the Rust book,\neach character is encoded in UTF-8 with multiple [Unicode](https://en.wikipedia.org/wiki/Unicode) value (code unit).\n\nSo in the Rust book, it says:\n\n> Indexing into a string is often a bad idea because it‚Äôs not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice.\n\nIt's one of the reasons why the Rust compiler does not allows the direct access to characters in strings.\nI really recommend you to read more about it in the [Rust book](https://doc.rust-lang.org/book/ch08-02-strings.html).\nIt's very easy to read and insightfulüëè.\n\n### Correcting `is_palindrome`\n\nWe can iterate over [bytes](https://doc.rust-lang.org/stable/std/string/struct.String.html#method.bytes) and compare the first half of the string with the reversed second half.\nIt's a palindrome if they were equal:\n\n```rust\n// ‚úÖ\nfn is_palindrome(str: String) -> bool {\n    let half = str.len() / 2;\n    let forward = str.bytes().take(half);\n    let backward = str.bytes().rev().take(half);\n\n    forward.eq(backward)\n}\n\nfn main() {\n    assert_eq!(is_palindrome(String::from(\"\")), true);\n    assert_eq!(is_palindrome(String::from(\"aabbccbbaa\")), true);\n    assert_eq!(is_palindrome(String::from(\"aabbccbbab\")), false);\n}\n```\n\nThe time and space complexity:\n\n- O(n) time, where n is the length of the string.\n- O(1) space.\n\nThe space complexity is `O(1)` because each iterator creates a pointer and a counter.\n\nAnother approach would be using the [DoubleEndedIterator](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html) trait and combining the forward and backward iterators with [`zip()`](https://doc.rust-lang.org/std/iter/fn.zip.html):\n\n```rust\nfn is_palindrome(str: String) -> bool {\n    let mut chars = string.bytes();\n    while let Some((front, back)) = chars.next().zip(chars.next_back()) {\n        if front != back {\n            return false;\n        }\n    }\n    true\n}\n```\n\nThe time and space complexity:\n\n- O(n) time, where n is the length of the string.\n- O(1) space.\n\n[This approach is suggested on Reddit](https://www.reddit.com/r/programming/comments/rr9dlw/indexing_strings_in_rust_and_typescript_a_case/).\nThanks a lot!\n\n## `isPalindrome` in TypeScript\n\nJavaScript allows string index. So we can actually translate the two pointer algorithm that didn't compile in rust.\n\n```ts\n/*\n *  lp       rp\n *  |        |\n *  v ‚Üí    ‚Üê v\n * \"aabbccbbaa\"\n */\nfunction isPalindrome(str: string): boolean {\n  let lp = 0\n  let rp = str.length - 1\n\n  while (lp < rp) {\n    if (str[lp] !== str[rp]) {\n      return false\n    }\n    lp += 1\n    rp -= 1\n  }\n  return true\n}\n\nisPalindrome('') // true\nisPalindrome('aabbccbbaa') // true\nisPalindrome('aabbccbbab') // false\n```\n\nThe time and space complexity are:\n\n- O(n) time, where n is the length of the string\n- O(1) space. Constant space for the two pointers.\n\nOr just compare the string forward and backward:\n\n```ts\nfunction isPalindrome(str: string): boolean {\n  return str === str.split('').reverse().join('')\n}\n```\n\nThe time and space complexity:\n\n- O(n) time, where n is the length of the input string\n- O(n) space, where n is the length of the input string\n\nIt's fairly easy in JavaScript. Does it mean that JavaScript treat strings differently than Rust does?\n\n## JavaScript Strings are UTF-16 encoded\n\nWe can find the definition of string primitive value in [ECMAScript Standard](https://tc39.es/ecma262/#sec-terms-and-definitions-string-value):\n\n> primitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer values\n\n> A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text.\n\nIn other word, each JavaScript character is represented in Unicode with two bytes and it's encoded in UTF-16.\n\nLet's have a look at some examples. We can use one or two code units to create a character:\n\n```ts\nconst s1: string = '\\u00E1' // √°\nconst s2: string = '\\u0061\\u0301' // √°\n```\n\nBoth `s1` and `s2` makes up a `√°`. If we check the length of both strings:\n\n```ts\nconsole.log(s1.length) // 1\nconsole.log(s2.length) // 2\n```\n\nThe lengths are different even though they both are representing the same character.\nLet's look inside the string with string indexing to find out what are elements in the strings:\n\n```ts\nconsole.log(s1[0]) // √°\nconsole.log(s1[1]) // undefined\n\nconsole.log(s2[0]) // a\nconsole.log(s2[1]) //  ÃÅ\nconsole.log(s2[2]) //  undefined\n```\n\nWe can see that `s2` is composed with two independent elements, `a` and ` ÃÅ`.\n\nJust by seeing the same character can be represented differently, it's obvious that string indexing in JavaScript is not reliable either.\n\nLet's check for equality:\n\n```ts\nconsole.log(s1 === s2) // false üßê\n```\n\nTo make it even more interesting, there is another way to compose the character `√°`:\n\n```ts\nconst s3: string = 'a\\u0301' // √°\n```\n\nIn `s3`, we substitute the code unit `\\u0061` with its representing character `a`.\nLet's run some checks:\n\n```ts\nconsole.log(s3.length === 2) // true\nconsole.log(s2 === s3) // true üßê\nconsole.log(s1 === s3) // false\n```\n\nSo far what we see is that there are multiple code unit compositions to represent the same character.\nThe equality is defined by the code unit compositions.\n\nIt can be highly inconvenient so JavaScript introduced a string method [`normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) to return the Unicode Normalization Form of a given string.\nLet's try it with `s1`, `s2`, and `s3`:\n\n```ts\nconsole.log(s1.normalize() === s2.normalize()) // true\nconsole.log(s1.normalize() === s3.normalize()) // true\n```\n\nLet's peek inside the normalized forms of `√°`:\n\n```ts\n// `escape` is deprecated.\nescape(s1.normalize()) // '%E1'\nescape(s2.normalize()) // '%E1'\nescape(s3.normalize()) // '%E1'\n```\n\nNote that [`escape()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape) is been removed from the ECMAScript standard.\n\nThanks to the normalization, handling strings is more predictable now.\n\nJavaScript actually provides an official [Encoding API](https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API).\nWe can use [TextEncoder](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder) and [TextDecoder](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder) to handle string encoding and decoding.\n\n```ts\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nconst bytes = encoder.encode('\\u0061\\u0301')\ndecoder.decode(bytes) // '√°'\n```\n\n## To Sum up\n\nString is complicated. Rust offers a robust system to handle strings and a strict complier to encourage us to think about string handling upfront.\nOn the other hand, JavaScript provides convenient APIs to handle simple use cases like ASCII.\nUnder the hood, they both implement Unicode standard and encoding to support written languages internationally.\n\n## Reference\n\n- [ASCII](https://en.wikipedia.org/wiki/ASCII)\n- [Unicode](https://en.wikipedia.org/wiki/Unicode)\n- [UTF-8](https://en.wikipedia.org/wiki/UTF-8)\n- [UTF-16](https://en.wikipedia.org/wiki/UTF-16)\n- [Palindrome](https://en.wikipedia.org/wiki/Palindrome)\n- [The Rust Programming Language](https://doc.rust-lang.org/book/)\n- [Rust's String Internal Representation](https://doc.rust-lang.org/book/ch08-02-strings.html#internal-representation)\n- [Rust String method `chars()`](https://doc.rust-lang.org/stable/std/string/struct.String.html#method.chars)\n- [Rust String method `bytes()`](https://doc.rust-lang.org/stable/std/string/struct.String.html#method.bytes)\n- [Rust String method `zip()`](https://doc.rust-lang.org/std/iter/fn.zip.html)\n- [Rust String Trait `DoubleEndedIterator`](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html)\n- [ECMAScript 2022 Language Specification](https://tc39.es/ecma262/#sec-terms-and-definitions-string-value)\n- [JavaScript `normalize()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\n- [JavaScript `escape()`](https://developer.mozlla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape)\n- [JavaScript Encoding API](https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API)\n- [JavaScript TextEncoder](https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder)\n- [JavaScript TextDecoder](https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder)\n- [What every JavaScript developer should know about Unicode](https://dmitripavlutin.com/what-every-javascript-developer-should-know-about-unicode/)\n\n---\n\nüí¨ Comments on [Reddit](https://www.reddit.com/r/rust/comments/rrc0gg/indexing_strings_in_rust_and_typescript_a_case/).\n\n---\n\nHere you have it! Thanks for reading throughüôå\n\nIf you find it useful, please share this article to help more people in their engineering journey.\n\nFeel free to connect with me on [twitter](https://twitter.com/dawchihliou)!\n\nIf you're interested in writing a CLI with TypeScript and implementing a real-world CLI application with Google Lighthouse integration, check out my previous article [\"Writing Your Own TypeScript CLI\"](/articles/writing-your-own-typescript-cli).\n\nIf you're interested in reading more about image optimization to boost your performance score, take a look at [\"Using WebP for Better User Experience\"](/articles/use-webp-for-better-ux).\nThere we discussed one of the modern image formats that greatly reduces the size of your images without sacrificing quality.\n\nIf you're wondering how to test Redux Observable, I wrote an article [\"Writing Better Marble Tests for Redux Observable and TypeScript\"](https://itnext.io/better-marble-test-70c7676a1e2) just for you.\nIt's a comprehensive guide to walk you through the thought process.\n\nHappy coding!\n","code":"var Component=(()=>{var r=Object.create;var t=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var i=a=>t(a,\"__esModule\",{value:!0});var u=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),N=(a,n)=>{i(a);for(var s in n)t(a,s,{get:n[s],enumerable:!0})},k=(a,n,s)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of h(n))!m.call(a,c)&&c!==\"default\"&&t(a,c,{get:()=>n[c],enumerable:!(s=d(n,c))||s.enumerable});return a},g=a=>k(i(t(a!=null?r(p(a)):{},\"default\",a&&a.__esModule&&\"default\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var o=u((v,l)=>{l.exports=_jsx_runtime});var w={};N(w,{default:()=>b});var e=g(o());function f(a={}){let n=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",code:\"code\",hr:\"hr\",p:\"p\",strong:\"strong\",pre:\"pre\",blockquote:\"blockquote\",h3:\"h3\"},a.components),{wrapper:s}=n,c=(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h2,{id:\"tldr\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#tldr\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"TL;DR\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"\\u{1FAA2} Accessing characters in strings with index is not compilable in Rust.\"}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"guitar\",children:\"\\u{1F3B8}\"}),\" We'll discuss how Rust think about strings.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"robot face\",children:\"\\u{1F916}\"}),\" We'll discuss how JavaScript handles strings.\"]}),`\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"\",\"aria-hidden\":!0,children:\"\\u{1F9D1}\"}),\"\\u200D\",(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"microscope\",children:\"\\u{1F52C}\"}),\" We'll compare a classic algorithm \",(0,e.jsx)(n.code,{children:\"is_palindrome\"}),\" in Rust and TypeScript.\"]}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsx)(n.p,{children:`Text is essential in programming languages.\nString is the Rust's and JavaScript's definition to process text in written languages around the world.\nThrough the simple concept of string indexing, we'll discuss how Rust and JavaScript process strings and how they handle the nuances in strings such as grapheme, or even emojis.`}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let's use a classic algorithm \",(0,e.jsx)(n.code,{children:\"is_palindrome\"}),\" to introduce the concept of string indexing.\"]}),`\n`,(0,e.jsxs)(n.h2,{id:\"is_palindrome-in-rust\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#is_palindrome-in-rust\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.code,{children:\"is_palindrome\"}),\" in Rust\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"A \",(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/Palindrome\",children:\"palindrome\"}),`, in a very general way of explaining it, is a string that reads the same forward and backward.\n\"`,(0,e.jsx)(n.strong,{children:\"Ana\"}),'\" is a palindrome, \"',(0,e.jsx)(n.strong,{children:\"A dog! A panic in a pagoda!\"}),'\" is a palindrome, or even \"',(0,e.jsx)(n.strong,{children:\"02/02/2020\"}),'\" is a palindrome.']}),`\n`,(0,e.jsx)(n.p,{children:`For the purpose of this article, we'll use a more narrowed definition to keep the algorithm simple.\nA palindrome here is defined as a \"continuous sequence of lowercase ASCII characters without whitespace\".`}),`\n`,(0,e.jsx)(n.p,{children:`One intuitive approach would be using two pointers.\nOne starts from the beginning of the given string moving toward the end, and the other from the end toward the beginning.\nWhile moving the pointers, compare the pointing characters.\nThe given string is a palindrome if all the comparisons are equal. Like this:`}),`\n`,(0,e.jsx)(n.pre,{className:\"language-rust\",children:(0,e.jsxs)(n.code,{className:\"language-rust code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsxs)(n.span,{className:\"token comment\",children:[\"// \",(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"cross mark\",children:\"\\u274C\"}),\" It won't compile\"]}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"fn\"}),\" \",(0,e.jsx)(n.span,{className:\"token function-definition function\",children:\"is_palindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"->\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"bool\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"//        lp       rp\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"//        |        |\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"//        v \\u2192    \\u2190 v\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token comment\",children:'// str = \"aabbccbbaa\"'}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"mut\"}),\" lp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"mut\"}),\" rp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"len\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"while\"}),\" lp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\" rp \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"lp\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"!=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"rp\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// ^^^^^^^ `String` cannot be indexed by `usize`\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"false\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    lp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    rp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"-=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:`If you try to compile the program, you'll notice that the Rust compiler won't let us access characters by index.\nIt's a very interesting constraint because many languages like JavaScript, Go, and Python offer the feature.`}),`\n`,(0,e.jsxs)(n.p,{children:[\"As we dig a little deeper, there are some string methods from the standard library like \",(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/stable/std/string/struct.String.html#method.chars\",children:(0,e.jsx)(n.code,{children:\"chars()\"})}),` to access the characters in a string.\n`,(0,e.jsx)(n.code,{children:\"chars()\"}),\" returns an iterator over the \",(0,e.jsx)(n.code,{children:\"char\"}),`s of a string slice. So we'll have to iterate through a string slice to access characters by index.\nLike this:`]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-rust\",children:(0,e.jsx)(n.code,{className:\"language-rust code-highlight\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" left \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"as_str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"chars\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"nth\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"lp\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"unwrap\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The simple task of accessing a character in a string has the time complexity of \",(0,e.jsx)(n.code,{children:\"O(n)\"}),\" instead of \",(0,e.jsx)(n.code,{children:\"O(1)\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Why is that?\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"rusts-strings-are-in-unicode-and-utf-8-encoded\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#rusts-strings-are-in-unicode-and-utf-8-encoded\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Rust's Strings Are in Unicode And UTF-8 Encoded\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We can find the \",(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/book/ch08-02-strings.html#internal-representation\",children:\"internal representaion\"}),\" of Rust's String from the \",(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/book/\",children:\"official Rust book\"}),\".\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"A String is a wrapper over a \",(0,e.jsx)(n.code,{children:\"Vec<u8>\"}),\".\"]}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"For strings in \",(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/ASCII\",children:\"ASCII\"}),\", each character is represented by 1 byte encoded in \",(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/UTF-8\",children:\"UTF-8\"}),`.\nHowever, for strings in other written languages, like `,(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/book/ch08-02-strings.html#bytes-and-scalar-values-and-grapheme-clusters-oh-my\",children:'\"\\u0928\\u092E\\u0938\\u094D\\u0924\\u0947\" in the Devanagari script'}),` from the Rust book,\neach character is encoded in UTF-8 with multiple `,(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/Unicode\",children:\"Unicode\"}),\" value (code unit).\"]}),`\n`,(0,e.jsx)(n.p,{children:\"So in the Rust book, it says:\"}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Indexing into a string is often a bad idea because it\\u2019s not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[`It's one of the reasons why the Rust compiler does not allows the direct access to characters in strings.\nI really recommend you to read more about it in the `,(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/book/ch08-02-strings.html\",children:\"Rust book\"}),`.\nIt's very easy to read and insightful`,(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"clapping hands\",children:\"\\u{1F44F}\"}),\".\"]}),`\n`,(0,e.jsxs)(n.h3,{id:\"correcting-is_palindrome\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#correcting-is_palindrome\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Correcting \",(0,e.jsx)(n.code,{children:\"is_palindrome\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We can iterate over \",(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/stable/std/string/struct.String.html#method.bytes\",children:\"bytes\"}),` and compare the first half of the string with the reversed second half.\nIt's a palindrome if they were equal:`]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-rust\",children:(0,e.jsxs)(n.code,{className:\"language-rust code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsxs)(n.span,{className:\"token comment\",children:[\"// \",(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"white heavy check mark\",children:\"\\u2705\"})]}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"fn\"}),\" \",(0,e.jsx)(n.span,{className:\"token function-definition function\",children:\"is_palindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"->\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"bool\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" half \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"len\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"/\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" forward \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"bytes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"take\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"half\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" backward \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"bytes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"rev\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"take\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"half\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    forward\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"eq\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"backward\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"fn\"}),\" \",(0,e.jsx)(n.span,{className:\"token function-definition function\",children:\"main\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token macro property\",children:\"assert_eq!\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"is_palindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"::\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"from\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token macro property\",children:\"assert_eq!\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"is_palindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"::\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"from\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"aabbccbbaa\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token macro property\",children:\"assert_eq!\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"is_palindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"::\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"from\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:'\"aabbccbbab\"'}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"false\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"The time and space complexity:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(n) time, where n is the length of the string.\"}),`\n`,(0,e.jsx)(n.li,{children:\"O(1) space.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"The space complexity is \",(0,e.jsx)(n.code,{children:\"O(1)\"}),\" because each iterator creates a pointer and a counter.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Another approach would be using the \",(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html\",children:\"DoubleEndedIterator\"}),\" trait and combining the forward and backward iterators with \",(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/std/iter/fn.zip.html\",children:(0,e.jsx)(n.code,{children:\"zip()\"})}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-rust\",children:(0,e.jsxs)(n.code,{className:\"language-rust code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"fn\"}),\" \",(0,e.jsx)(n.span,{className:\"token function-definition function\",children:\"is_palindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token keyword\",children:\"str\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"String\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"->\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"bool\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"mut\"}),\" chars \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" string\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"bytes\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"while\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"Some\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"front\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\",\"}),\" back\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" chars\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"next\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"zip\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"chars\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"next_back\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" front \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"!=\"}),\" back \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"            \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"false\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\";\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"        \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"The time and space complexity:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(n) time, where n is the length of the string.\"}),`\n`,(0,e.jsx)(n.li,{children:\"O(1) space.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"https://www.reddit.com/r/programming/comments/rr9dlw/indexing_strings_in_rust_and_typescript_a_case/\",children:\"This approach is suggested on Reddit\"}),`.\nThanks a lot!`]}),`\n`,(0,e.jsxs)(n.h2,{id:\"ispalindrome-in-typescript\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#ispalindrome-in-typescript\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.code,{children:\"isPalindrome\"}),\" in TypeScript\"]}),`\n`,(0,e.jsx)(n.p,{children:\"JavaScript allows string index. So we can actually translate the two pointer algorithm that didn't compile in rust.\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsx)(n.span,{className:\"code-line\",children:(0,e.jsx)(n.span,{className:\"token comment\",children:`/*\n`})}),(0,e.jsx)(n.span,{className:\"code-line\",children:(0,e.jsx)(n.span,{className:\"token comment\",children:` *  lp       rp\n`})}),(0,e.jsx)(n.span,{className:\"code-line\",children:(0,e.jsx)(n.span,{className:\"token comment\",children:` *  |        |\n`})}),(0,e.jsx)(n.span,{className:\"code-line\",children:(0,e.jsx)(n.span,{className:\"token comment\",children:` *  v \\u2192    \\u2190 v\n`})}),(0,e.jsx)(n.span,{className:\"code-line\",children:(0,e.jsx)(n.span,{className:\"token comment\",children:` * \"aabbccbbaa\"\n`})}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\" */\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"isPalindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"str\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"boolean\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" lp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"let\"}),\" rp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" str\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"length \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"-\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"while\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"lp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"<\"}),\" rp\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"if\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"str\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"lp\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"!==\"}),\" str\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),\"rp\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"      \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"false\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    lp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"+=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"    rp \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"-=\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" \",(0,e.jsx)(n.span,{className:\"token boolean\",children:\"true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"isPalindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"''\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"isPalindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'aabbccbbaa'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"isPalindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'aabbccbbab'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// false\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"The time and space complexity are:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(n) time, where n is the length of the string\"}),`\n`,(0,e.jsx)(n.li,{children:\"O(1) space. Constant space for the two pointers.\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"Or just compare the string forward and backward:\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"function\"}),\" \",(0,e.jsx)(n.span,{className:\"token function\",children:\"isPalindrome\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"str\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"boolean\"}),\" \",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"{\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"  \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"return\"}),\" str \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" str\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"split\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"''\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"reverse\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"join\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"''\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"}\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:\"The time and space complexity:\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:\"O(n) time, where n is the length of the input string\"}),`\n`,(0,e.jsx)(n.li,{children:\"O(n) space, where n is the length of the input string\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"It's fairly easy in JavaScript. Does it mean that JavaScript treat strings differently than Rust does?\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"javascript-strings-are-utf-16-encoded\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#javascript-strings-are-utf-16-encoded\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"JavaScript Strings are UTF-16 encoded\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We can find the definition of string primitive value in \",(0,e.jsx)(n.a,{href:\"https://tc39.es/ecma262/#sec-terms-and-definitions-string-value\",children:\"ECMAScript Standard\"}),\":\"]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"primitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer values\"}),`\n`]}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:\"A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text.\"}),`\n`]}),`\n`,(0,e.jsx)(n.p,{children:\"In other word, each JavaScript character is represented in Unicode with two bytes and it's encoded in UTF-16.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Let's have a look at some examples. We can use one or two code units to create a character:\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" s1\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'\\\\u00E1'\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// \\xE1\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" s2\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'\\\\u0061\\\\u0301'\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// \\xE1\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Both \",(0,e.jsx)(n.code,{children:\"s1\"}),\" and \",(0,e.jsx)(n.code,{children:\"s2\"}),\" makes up a \",(0,e.jsx)(n.code,{children:\"\\xE1\"}),\". If we check the length of both strings:\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"length\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// 1\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"length\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// 2\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:`The lengths are different even though they both are representing the same character.\nLet's look inside the string with string indexing to find out what are elements in the strings:`}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// \\xE1\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// undefined\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"0\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// a\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"1\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"//  \\u0301\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"[\"}),(0,e.jsx)(n.span,{className:\"token number\",children:\"2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"]\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"//  undefined\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"We can see that \",(0,e.jsx)(n.code,{children:\"s2\"}),\" is composed with two independent elements, \",(0,e.jsx)(n.code,{children:\"a\"}),\" and \",(0,e.jsx)(n.code,{children:\" \\u0301\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Just by seeing the same character can be represented differently, it's obvious that string indexing in JavaScript is not reliable either.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Let's check for equality:\"}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsx)(n.code,{className:\"language-ts code-highlight\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1 \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsxs)(n.span,{className:\"token comment\",children:[\"// false \",(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"\",\"aria-hidden\":!0,children:\"\\u{1F9D0}\"})]}),`\n`]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"To make it even more interesting, there is another way to compose the character \",(0,e.jsx)(n.code,{children:\"\\xE1\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsx)(n.code,{className:\"language-ts code-highlight\",children:(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" s3\",(0,e.jsx)(n.span,{className:\"token operator\",children:\":\"}),\" \",(0,e.jsx)(n.span,{className:\"token builtin\",children:\"string\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token string\",children:\"'a\\\\u0301'\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// \\xE1\"}),`\n`]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In \",(0,e.jsx)(n.code,{children:\"s3\"}),\", we substitute the code unit \",(0,e.jsx)(n.code,{children:\"\\\\u0061\"}),\" with its representing character \",(0,e.jsx)(n.code,{children:\"a\"}),`.\nLet's run some checks:`]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s3\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),\"length \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" \",(0,e.jsx)(n.span,{className:\"token number\",children:\"2\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s2 \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" s3\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsxs)(n.span,{className:\"token comment\",children:[\"// true \",(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"\",\"aria-hidden\":!0,children:\"\\u{1F9D0}\"})]}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1 \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" s3\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// false\"}),`\n`]})]})}),`\n`,(0,e.jsx)(n.p,{children:`So far what we see is that there are multiple code unit compositions to represent the same character.\nThe equality is defined by the code unit compositions.`}),`\n`,(0,e.jsxs)(n.p,{children:[\"It can be highly inconvenient so JavaScript introduced a string method \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\",children:(0,e.jsx)(n.code,{children:\"normalize()\"})}),` to return the Unicode Normalization Form of a given string.\nLet's try it with `,(0,e.jsx)(n.code,{children:\"s1\"}),\", \",(0,e.jsx)(n.code,{children:\"s2\"}),\", and \",(0,e.jsx)(n.code,{children:\"s3\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// true\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token builtin\",children:\"console\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"log\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"===\"}),\" s3\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// true\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let's peek inside the normalized forms of \",(0,e.jsx)(n.code,{children:\"\\xE1\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token comment\",children:\"// `escape` is deprecated.\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"escape\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s1\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// '%E1'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"escape\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s2\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// '%E1'\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token function\",children:\"escape\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"s3\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"normalize\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// '%E1'\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Note that \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\",children:(0,e.jsx)(n.code,{children:\"escape()\"})}),\" is been removed from the ECMAScript standard.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Thanks to the normalization, handling strings is more predictable now.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"JavaScript actually provides an official \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API\",children:\"Encoding API\"}),`.\nWe can use `,(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\",children:\"TextEncoder\"}),\" and \",(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\",children:\"TextDecoder\"}),\" to handle string encoding and decoding.\"]}),`\n`,(0,e.jsx)(n.pre,{className:\"language-ts\",children:(0,e.jsxs)(n.code,{className:\"language-ts code-highlight\",children:[(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" encoder \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"new\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"TextEncoder\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" decoder \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" \",(0,e.jsx)(n.span,{className:\"token keyword\",children:\"new\"}),\" \",(0,e.jsx)(n.span,{className:\"token class-name\",children:\"TextDecoder\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsx)(n.span,{className:\"code-line\",children:`\n`}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[(0,e.jsx)(n.span,{className:\"token keyword\",children:\"const\"}),\" bytes \",(0,e.jsx)(n.span,{className:\"token operator\",children:\"=\"}),\" encoder\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"encode\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),(0,e.jsx)(n.span,{className:\"token string\",children:\"'\\\\u0061\\\\u0301'\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),`\n`]}),(0,e.jsxs)(n.span,{className:\"code-line\",children:[\"decoder\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\".\"}),(0,e.jsx)(n.span,{className:\"token function\",children:\"decode\"}),(0,e.jsx)(n.span,{className:\"token punctuation\",children:\"(\"}),\"bytes\",(0,e.jsx)(n.span,{className:\"token punctuation\",children:\")\"}),\" \",(0,e.jsx)(n.span,{className:\"token comment\",children:\"// '\\xE1'\"}),`\n`]})]})}),`\n`,(0,e.jsxs)(n.h2,{id:\"to-sum-up\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#to-sum-up\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"To Sum up\"]}),`\n`,(0,e.jsx)(n.p,{children:`String is complicated. Rust offers a robust system to handle strings and a strict complier to encourage us to think about string handling upfront.\nOn the other hand, JavaScript provides convenient APIs to handle simple use cases like ASCII.\nUnder the hood, they both implement Unicode standard and encoding to support written languages internationally.`}),`\n`,(0,e.jsxs)(n.h2,{id:\"reference\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#reference\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),\"Reference\"]}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/ASCII\",children:\"ASCII\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/Unicode\",children:\"Unicode\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/UTF-8\",children:\"UTF-8\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/UTF-16\",children:\"UTF-16\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://en.wikipedia.org/wiki/Palindrome\",children:\"Palindrome\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/book/\",children:\"The Rust Programming Language\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://doc.rust-lang.org/book/ch08-02-strings.html#internal-representation\",children:\"Rust's String Internal Representation\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://doc.rust-lang.org/stable/std/string/struct.String.html#method.chars\",children:[\"Rust String method \",(0,e.jsx)(n.code,{children:\"chars()\"})]})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://doc.rust-lang.org/stable/std/string/struct.String.html#method.bytes\",children:[\"Rust String method \",(0,e.jsx)(n.code,{children:\"bytes()\"})]})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://doc.rust-lang.org/std/iter/fn.zip.html\",children:[\"Rust String method \",(0,e.jsx)(n.code,{children:\"zip()\"})]})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html\",children:[\"Rust String Trait \",(0,e.jsx)(n.code,{children:\"DoubleEndedIterator\"})]})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://tc39.es/ecma262/#sec-terms-and-definitions-string-value\",children:\"ECMAScript 2022 Language Specification\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\",children:[\"JavaScript \",(0,e.jsx)(n.code,{children:\"normalize()\"})]})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\"https://developer.mozlla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\",children:[\"JavaScript \",(0,e.jsx)(n.code,{children:\"escape()\"})]})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/Encoding_API\",children:\"JavaScript Encoding API\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder\",children:\"JavaScript TextEncoder\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder\",children:\"JavaScript TextDecoder\"})}),`\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\"https://dmitripavlutin.com/what-every-javascript-developer-should-know-about-unicode/\",children:\"What every JavaScript developer should know about Unicode\"})}),`\n`]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"speech balloon\",children:\"\\u{1F4AC}\"}),\" Comments on \",(0,e.jsx)(n.a,{href:\"https://www.reddit.com/r/rust/comments/rrc0gg/indexing_strings_in_rust_and_typescript_a_case/\",children:\"Reddit\"}),\".\"]}),`\n`,(0,e.jsx)(n.hr,{}),`\n`,(0,e.jsxs)(n.p,{children:[\"Here you have it! Thanks for reading through\",(0,e.jsx)(n.span,{role:\"img\",\"aria-label\":\"raising hands\",children:\"\\u{1F64C}\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"If you find it useful, please share this article to help more people in their engineering journey.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Feel free to connect with me on \",(0,e.jsx)(n.a,{href:\"https://twitter.com/dawchihliou\",children:\"twitter\"}),\"!\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"If you're interested in writing a CLI with TypeScript and implementing a real-world CLI application with Google Lighthouse integration, check out my previous article \",(0,e.jsx)(n.a,{href:\"/articles/writing-your-own-typescript-cli\",children:'\"Writing Your Own TypeScript CLI\"'}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"If you're interested in reading more about image optimization to boost your performance score, take a look at \",(0,e.jsx)(n.a,{href:\"/articles/use-webp-for-better-ux\",children:'\"Using WebP for Better User Experience\"'}),`.\nThere we discussed one of the modern image formats that greatly reduces the size of your images without sacrificing quality.`]}),`\n`,(0,e.jsxs)(n.p,{children:[\"If you're wondering how to test Redux Observable, I wrote an article \",(0,e.jsx)(n.a,{href:\"https://itnext.io/better-marble-test-70c7676a1e2\",children:'\"Writing Better Marble Tests for Redux Observable and TypeScript\"'}),` just for you.\nIt's a comprehensive guide to walk you through the thought process.`]}),`\n`,(0,e.jsx)(n.p,{children:\"Happy coding!\"})]});return s?(0,e.jsx)(s,Object.assign({},a,{children:c})):c}var b=f;return w;})();\n;return Component.default;"},"_id":"articles/indexing-strings-in-rust-and-typescript.mdx","_raw":{"sourceFilePath":"articles/indexing-strings-in-rust-and-typescript.mdx","sourceFileName":"indexing-strings-in-rust-and-typescript.mdx","sourceFileDir":"articles","bodyType":"mdx","flattenedPath":"articles/indexing-strings-in-rust-and-typescript"},"type":"Article","readingTime":{"text":"9 min read","minutes":8.25,"time":495000,"words":1650},"wordCount":1652,"slug":"indexing-strings-in-rust-and-typescript"}},"__N_SSG":true}