{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.resolveHref = resolveHref;\nexports.markLoadingError = markLoadingError;\nexports.default = void 0;\n\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\n\nvar _denormalizePagePath = require(\"../../server/denormalize-page-path\");\n\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\n\nvar _utils = require(\"../utils\");\n\nvar _isDynamic = require(\"./utils/is-dynamic\");\n\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\n\nvar _querystring = require(\"./utils/querystring\");\n\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\n\nvar _routeMatcher = require(\"./utils/route-matcher\");\n\nvar _routeRegex = require(\"./utils/route-regex\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global __NEXT_DATA__ */\n// tslint:disable:no-console\n\n\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\n\nfunction hasBasePath(path) {\n  return path === basePath || path.startsWith(basePath + '/');\n}\n\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return basePath && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(basePath) : basePath + path : path;\n}\n\nfunction delBasePath(path) {\n  return path.slice(basePath.length) || '/';\n}\n/**\n* Detects whether a given url is routable by the Next.js router (browser only).\n*/\n\n\nfunction isLocalURL(url) {\n  if (url.startsWith('/')) return true;\n\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils.getLocationOrigin)();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n}\n/**\n* Resolves a given hyperlink with a certain router state (basePath not included).\n* Preserves absolute urls.\n*/\n\n\nfunction resolveHref(currentPath, href) {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n');\n  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href);\n\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname); // if the origin didn't change, it means we received a relative href\n\n    return finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n  } catch (_) {\n    return urlAsString;\n  }\n}\n\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR');\n\nfunction markLoadingError(err) {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {});\n}\n\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as\n  };\n}\n\nconst manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && false && 'scrollRestoration' in window.history;\n\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n\n      throw new Error(`Failed to load static props`);\n    }\n\n    return res.json();\n  });\n}\n\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err);\n    }\n\n    throw err;\n  });\n}\n\nclass Router {\n  /**\n  * Map of all components loaded in `Router`\n  */\n  // Static Data Cache\n  constructor(_pathname, _query, _as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    initialStyleSheets,\n    err,\n    subscription,\n    isFallback\n  }) {\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this._shallow = void 0;\n\n    this.onPopState = e => {\n      const state = e.state;\n\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      }\n\n      if (!state.__N) {\n        return;\n      }\n\n      const {\n        url,\n        as,\n        options\n      } = state;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n      if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow\n      }));\n    }; // represents the current component key\n\n\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        styleSheets: initialStyleSheets,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ]\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n\n    this.asPath = // @ts-ignore this is temporarily global (attached to window)\n    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n\n    this.isSsr = true;\n    this.isFallback = isFallback;\n\n    if (false) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)());\n      }\n\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n          let scrollDebounceTimeout;\n\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout);\n            scrollDebounceTimeout = setTimeout(() => {\n              const {\n                url,\n                as: curAs,\n                options\n              } = history.state;\n              this.changeState('replaceState', url, curAs, Object.assign({}, options, {\n                _N_X: window.scrollX,\n                _N_Y: window.scrollY\n              }));\n            }, 10);\n          };\n\n          window.addEventListener('scroll', debouncedScrollSave);\n        }\n      }\n    }\n  }\n\n  reload() {\n    window.location.reload();\n  }\n  /**\n  * Go back in history\n  */\n\n\n  back() {\n    window.history.back();\n  }\n  /**\n  * Performs a `pushState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  push(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  }\n  /**\n  * Performs a `replaceState` with arguments\n  * @param url of the route\n  * @param as masks `url` for the browser\n  * @param options object you can define `shallow` and other options\n  */\n\n\n  replace(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n\n  async change(method, url, as, options) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n\n\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute);\n    }\n\n    const cleanedAs = hasBasePath(as) ? delBasePath(as) : as;\n    this._inFlightRoute = as; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n\n    if (!options._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as); // TODO: do we need the resolved href when only a hash change?\n\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route]);\n      Router.events.emit('hashChangeComplete', as);\n      return true;\n    } // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n\n\n    const pages = await this.pageLoader.getPageList();\n    const {\n      __rewrites: rewrites\n    } = await this.pageLoader.promisedBuildManifest;\n    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n    let {\n      pathname,\n      searchParams\n    } = parsed;\n    parsed = this._resolveHref(parsed, pages);\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname;\n      url = (0, _utils.formatWithValidation)(parsed);\n    }\n\n    const query = (0, _querystring.searchParamsToUrlQuery)(searchParams); // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n\n    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState';\n    }\n\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    const {\n      shallow = false\n    } = options; // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n\n    let resolvedAs = as;\n\n    if (process.env.__NEXT_HAS_REWRITES) {\n      resolvedAs = (0, _resolveRewrites.default)(as, pages, basePath, rewrites, query, p => this._resolveHref({\n        pathname: p\n      }, pages).pathname);\n    }\n\n    resolvedAs = delBasePath(resolvedAs);\n\n    if ((0, _isDynamic.isDynamicRoute)(route)) {\n      const {\n        pathname: asPathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);\n      const routeRegex = (0, _routeRegex.getRouteRegex)(route);\n      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n\n      if (!routeMatch) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n\n          throw new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` + `Read more: https://err.sh/vercel/next.js/incompatible-href-as`);\n        }\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as);\n\n    try {\n      const routeInfo = await this.getRouteInfo(route, pathname, query, as, shallow);\n      let {\n        error\n      } = routeInfo;\n      Router.events.emit('beforeHistoryChange', as);\n      this.changeState(method, url, as, options);\n\n      if (true) {\n        const appComp = this.components['/_app'].Component;\n        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n      }\n\n      await this.set(route, pathname, query, cleanedAs, routeInfo).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs);\n        throw error;\n      }\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo(options._N_X, options._N_Y);\n        }\n      }\n\n      Router.events.emit('routeChangeComplete', as);\n      return true;\n    } catch (err) {\n      if (err.cancelled) {\n        return false;\n      }\n\n      throw err;\n    }\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true\n      }, // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n\n  async handleRouteInfoError(err, pathname, query, as, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n\n      throw buildCancellationError();\n    }\n\n    try {\n      const {\n        page: Component,\n        styleSheets\n      } = await this.fetchComponent('/_error');\n      const routeInfo = {\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n\n      try {\n        routeInfo.props = await this.getInitialProps(Component, {\n          err,\n          pathname,\n          query\n        });\n      } catch (gipErr) {\n        console.error('Error in error page `getInitialProps`: ', gipErr);\n        routeInfo.props = {};\n      }\n\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true);\n    }\n  }\n\n  async getRouteInfo(route, pathname, query, as, shallow = false) {\n    try {\n      const cachedRouteInfo = this.components[route];\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo;\n      }\n\n      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      let dataHref;\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n          pathname,\n          query\n        }), delBasePath(as), __N_SSG);\n      }\n\n      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component, // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      }));\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as);\n    }\n  }\n\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data);\n  }\n  /**\n  * Callback to execute before replacing router state\n  * @param cb callback to be executed\n  */\n\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n\n  _resolveHref(parsedHref, pages) {\n    const {\n      pathname\n    } = parsedHref;\n    const cleanPathname = (0, _denormalizePagePath.denormalizePagePath)(delBasePath(pathname));\n\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n      return parsedHref;\n    } // handle resolving href for dynamic routes\n\n\n    if (!pages.includes(cleanPathname)) {\n      // eslint-disable-next-line array-callback-return\n      pages.some(page => {\n        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {\n          parsedHref.pathname = addBasePath(page);\n          return true;\n        }\n      });\n    }\n\n    return parsedHref;\n  }\n  /**\n  * Prefetch page code, you may wait for the data during page rendering.\n  * This feature only works in production!\n  * @param url the href of prefetched page\n  * @param asPath the as path of the prefetched page\n  */\n\n\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n    let {\n      pathname\n    } = parsed;\n    const pages = await this.pageLoader.getPageList();\n    parsed = this._resolveHref(parsed, pages);\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname;\n      url = (0, _utils.formatWithValidation)(parsed);\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n\n\n    if (true) {\n      return;\n    }\n\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    await Promise.all([this.pageLoader.prefetchData(url, asPath), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n\n    const componentResult = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n\n    return componentResult;\n  }\n\n  _getData(fn) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n\n      return data;\n    });\n  }\n\n  _getStaticData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n\n    if (false && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey]);\n    }\n\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n\n  _getServerData(dataHref) {\n    return fetchNextData(dataHref, this.isSsr);\n  }\n\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n\n    const AppTree = this._wrapApp(App);\n\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n\n  abortComponentLoad(as) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n\n  notify(data) {\n    return this.sub(data, this.components['/_app'].Component);\n  }\n\n}\n\nexports.default = Router;\nRouter.events = (0, _mitt.default)();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["basePath","process","Object","cancelled","path","url","locationOrigin","resolved","hasBasePath","base","urlAsString","finalUrl","PAGE_LOAD_ERROR","Symbol","addBasePath","resolveHref","router","as","manualScrollRestoration","window","credentials","res","attempts","fetchRetry","isServerRender","err","markLoadingError","Router","route","pathname","query","asPath","components","sdc","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","_inFlightRoute","_shallow","constructor","styleSheets","props","__N_SSG","initialProps","__N_SSP","Component","__NEXT_DATA__","debouncedScrollSave","clearTimeout","scrollDebounceTimeout","setTimeout","history","_N_X","_N_Y","e","state","shallow","options","reload","back","push","prepareUrlAs","replace","isLocalURL","ST","performance","cleanedAs","delBasePath","pages","__rewrites","parsed","method","resolvedAs","p","routeRegex","routeMatch","missingParams","param","console","asPathname","routeInfo","appComp","error","changeState","__N","buildCancellationError","page","cachedRouteInfo","require","isValidElementType","dataHref","set","beforePopState","onlyAHashChange","newHash","oldUrlNoHash","oldHash","scrollToHash","hash","idEl","document","nameEl","urlIsNew","_resolveHref","cleanPathname","parsedHref","Promise","cancel","componentResult","_getData","fn","data","_getStaticData","href","fetchNextData","_getServerData","getInitialProps","AppTree","ctx","abortComponentLoad","notify"],"mappings":"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","sourcesContent":["/* global __NEXT_DATA__ */\n// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport { denormalizePagePath } from '../../server/denormalize-page-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\ninterface TransitionOptions {\n  shallow?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState = null | { __N: false } | ({ __N: true } & NextHistoryState)\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nexport function hasBasePath(path: string): boolean {\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return basePath && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(basePath)\n      : basePath + path\n    : path\n}\n\nexport function delBasePath(path: string): string {\n  return path.slice(basePath.length) || '/'\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  if (url.startsWith('/')) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(currentPath: string, href: Url): string {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n')\n  const urlAsString =\n    typeof href === 'string' ? href : formatWithValidation(href)\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    // if the origin didn't change, it means we received a relative href\n    return finalUrl.origin === base.origin\n      ? finalUrl.href.slice(finalUrl.origin.length)\n      : finalUrl.href\n  } catch (_) {\n    return urlAsString\n  }\n}\n\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR')\nexport function markLoadingError(err: Error): Error {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {})\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as,\n  }\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n}\n\nexport type PrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<PrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (data: PrivateRouteInfo, App: AppComponent) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      throw new Error(`Failed to load static props`)\n    }\n\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      initialStyleSheets,\n      err,\n      subscription,\n      isFallback,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      initialStyleSheets: StyleSheetTuple[]\n      App: AppComponent\n      wrapApp: (App: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        styleSheets: initialStyleSheets,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n      // @ts-ignore this is temporarily global (attached to window)\n      isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL()\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n\n          let scrollDebounceTimeout: undefined | NodeJS.Timeout\n\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout)\n\n            scrollDebounceTimeout = setTimeout(() => {\n              const { url, as: curAs, options } = history.state\n              this.changeState(\n                'replaceState',\n                url,\n                curAs,\n                Object.assign({}, options, {\n                  _N_X: window.scrollX,\n                  _N_Y: window.scrollY,\n                })\n              )\n            }, 10)\n          }\n\n          window.addEventListener('scroll', debouncedScrollSave)\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    const { url, as, options } = state\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n      })\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute)\n    }\n\n    const cleanedAs = hasBasePath(as) ? delBasePath(as) : as\n    this._inFlightRoute = as\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!(options as any)._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route])\n      Router.events.emit('hashChangeComplete', as)\n      return true\n    }\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    const pages = await this.pageLoader.getPageList()\n    const { __rewrites: rewrites } = await this.pageLoader.promisedBuildManifest\n\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname, searchParams } = parsed\n\n    parsed = this._resolveHref(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    const query = searchParamsToUrlQuery(searchParams)\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState'\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    const { shallow = false } = options\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    if (process.env.__NEXT_HAS_REWRITES) {\n      resolvedAs = resolveRewrites(\n        as,\n        pages,\n        basePath,\n        rewrites,\n        query,\n        (p: string) => this._resolveHref({ pathname: p }, pages).pathname!\n      )\n    }\n    resolvedAs = delBasePath(resolvedAs)\n\n    if (isDynamicRoute(route)) {\n      const { pathname: asPathname } = parseRelativeUrl(resolvedAs)\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      if (!routeMatch) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n              `Read more: https://err.sh/vercel/next.js/incompatible-href-as`\n          )\n        }\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as)\n\n    try {\n      const routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        shallow\n      )\n      let { error } = routeInfo\n\n      Router.events.emit('beforeHistoryChange', as)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      await this.set(route, pathname!, query, cleanedAs, routeInfo).catch(\n        (e) => {\n          if (e.cancelled) error = error || e\n          else throw e\n        }\n      )\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs)\n        throw error\n      }\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo((options as any)._N_X, (options as any)._N_Y)\n        }\n      }\n      Router.events.emit('routeChangeComplete', as)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    loadErrorFail?: boolean\n  ): Promise<PrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      const { page: Component, styleSheets } = await this.fetchComponent(\n        '/_error'\n      )\n      const routeInfo: PrivateRouteInfo = {\n        Component,\n        styleSheets,\n        err,\n        error: err,\n      }\n\n      try {\n        routeInfo.props = await this.getInitialProps(Component, {\n          err,\n          pathname,\n          query,\n        } as any)\n      } catch (gipErr) {\n        console.error('Error in error page `getInitialProps`: ', gipErr)\n        routeInfo.props = {}\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true)\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    shallow: boolean = false\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const cachedRouteInfo = this.components[route]\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo\n      }\n\n      const routeInfo: PrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          delBasePath(as),\n          __N_SSG\n        )\n      }\n\n      const props = await this._getData<PrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n              } as any\n            )\n      )\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  _resolveHref(parsedHref: UrlObject, pages: string[]) {\n    const { pathname } = parsedHref\n    const cleanPathname = denormalizePagePath(delBasePath(pathname!))\n\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n      return parsedHref\n    }\n\n    // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname!)) {\n      // eslint-disable-next-line array-callback-return\n      pages.some((page) => {\n        if (\n          isDynamicRoute(page) &&\n          getRouteRegex(page).re.test(cleanPathname!)\n        ) {\n          parsedHref.pathname = addBasePath(page)\n          return true\n        }\n      })\n    }\n    return parsedHref\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    const pages = await this.pageLoader.getPageList()\n\n    parsed = this._resolveHref(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    await Promise.all([\n      this.pageLoader.prefetchData(url, asPath),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (process.env.NODE_ENV === 'production' && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    return fetchNextData(dataHref, this.isSsr)\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string): void {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as)\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(data: PrivateRouteInfo): Promise<void> {\n    return this.sub(data, this.components['/_app'].Component as AppComponent)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}