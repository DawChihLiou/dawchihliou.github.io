{"pageProps":{"post":{"title":"Tired of Slow Code Reviews? Read this","publishedAt":"Dec 6, 2022","description":"An ex-tech lead's guide to create a healthy code review culture that helps you ship your code faster.","cover":"/optimized/articles/slow-code-review/hero.webp","category":"Leadership","coverWidth":"1400","coverHeight":"600","body":{"raw":"\n## TL;DR\n\n- üèé Learn how to accelerate the code review process to maximize your productivity\n- üî¨ Learn the best practices I came across for code reviewers\n- ‚úèÔ∏è Learn the best practices I came across for pull request authors\n\n---\n\nThis article is also available on\n\n- [Level Up Coding](https://levelup.gitconnected.com/tired-of-slow-code-reviews-read-this-1a26b3e4539a)\n- [Hacker Noon](https://hackernoon.com/what-to-do-when-youre-tired-of-slow-code-reviews)\n\nFeel free to read it on your favorite platform‚ú®\n\n---\n\nImagine this.\n\nYou just implemented a feature and wrote all the test cases. You felt great about the code so you opened a pull request and let your coworkers know. After days passing by, your pull request looked exactly the same as before. Seemingly untouched. No comment. No change request. You asked your coworkers again for code review and they agreed. Another week went by and nothing happened. You asked again and they told you that they needed more time because it wasn't a small PR and there was a lot to take into consideration.\n\nFinally, you saw a notification about a change request and you jumped on it right away. After resolving merge conflicts and fixing the edge cases, you requested a review again, and waited. Another change request appeared after a few days and you repeated the process again. You got an approval after another revision and the PR was finally merged to the trunk.\n\n**After 4 weeks since you opened the PR.**\n\nIf you can relate to it, you're not alone. Many teams experienced such a slow code review process. In fact, it's [one of the major blockers][6] in the development cycle. So I want to share with you the best practices of code review I learned to speed up the development and help you ship code faster.\n\nLet's go.\n\n## For Pull Request Authors\n\nThe number one thing I've learned to boost code review productivity is to be thoughtful as an author. Other than producing clean code, there are many small things you can do to help your reviewers understand your pull requests proactively.\n\n### Be The Driver\n\nYou, the author, are the driver of the pace. Knowing that you rely on your coworkers during the code review process, you can clearly communicate the **when** and **what** upfront to align expectations.\n\nThe **when** is the most important to communicate because it tells your reviewers how urgent it is. The reviewers can plan their work accordingly. It's a great way to set a [timebox][8] for the review process, and it's also a great way to show respect to your coworkers' time.\n\nTo communicate the **what**, make sure you include a PR description that focuses on helping your reviewers understand the purpose and code design of your changes. Instead of listing functionalities, start with an opening paragraph explaining the background and why this PR is needed helps the reviewers to build their [mental models][9]. Other descriptions I find very useful are:\n\n- **Code design diagrams**: a [screenshot of your high-level code structure][10] helps the reviewers to [review the overall design][11] and react quickly to your pull request.\n- **Acceptance Criteria**: a list of simple sentences like [\"An acknowledgment email is sent to the user after submitting the form.\"][12] helps the reviews look for missing functionalities and test cases.\n\n### Keep It Concise\n\nSmall, laser-focused pull requests are the easiest to read. How small? Google Engineering Practices say [\"can't make it small enough\"][4]. [A study][3] has shown that the code review quality decreases as the code change increases. The longer your reviewers review at a time, the less defects they catch. So it's important to keep your pull request small and focus on one thing. If the feature you're developing is too large, you can consider splitting it into multiple pull requests using the [\"stacked pull request\"][5] technique.\n\n<img\n  src=\"/optimized/articles/slow-code-review/stacked-pr.webp\"\n  alt=\"stacked pull request visualization\"\n  width=\"100%\"\n  className=\"rounded centered\"\n  loading=\"lazy\"\n/>\n\nIt replaces a large pull request with a sequence of small pull requests. It helps the reviewers to focus on one thing at the time and aligns brilliantly with the principal of [continuous integration and continuous delivery][13].\n\n## For Code Reviewers\n\n### Be Mindful about Biases\n\nA [study published by Google in 2022][2] found that pull request authors faced different levels of pushback that varied depending on the authors' demographics. According to data, they [found][1] that\n\n> - Women faced 21% higher odds of pushback than men\n> - Black+ developers faced 54% higher odds than White+ developers\n> - Latinx+ developers faced 15% higher odds than White+ developers\n> - Asian+ developers faced 42% higher odds than White+ developers\n> - Older developers faced higher odds of pushback than younger developers\n\nWe should be more mindful about the unintentional biases, especially in a diverse workplace. By being aware of it, we can avoid unnecessary pushback in code reviews and help accelerate the process.\n\n### It's A Great Place for Learning, Not Snob\n\nRegardless of your level of experience, working as a developer is about constant learning. Pull request is an invaluable \"marketplace\" for developers to communicate and exchange feedback. So make sure it's a place of respect and always [aim for knowledge sharing](https://github.com/google/eng-practices/blob/master/review/reviewer/standard.md#mentoring).\n\nFor me it has always been an amazing occasion to learn about domain knowledge. Take my PR in [Airbnb JavaScript Style Guide][14], I learned so much about [ECMAScript Language Specification][15] from a [Ecma TC39][16] member. If he was to dismiss my request [without constructive feedback][17], the teaching moment would have never exist.\n\n### Inaction Is Bad\n\nI read about a blog post titled [\"Aggressive Code Review\"][18] by a tech lead at Instagram a year ago. He claimed that an effective code review consist of\n\n- decisive action ASAP\n- aiming to reduce the cost of mistakes\n- demanding small pull request and move fast\n\nWhat I found refreshing in his approach is that **not acting on a pull request is not an option**. It minimizes the lead time to review and it has been very beneficial to me and my team. We are able to ship fast because we take proactive actions to code review. We don't let pending pull requests linger and we review with our business cases in mind.\n\n## Final Thoughts\n\nTo recap the best practices of pull request and code review to accelerate your development cycle\n\n- establish clear communication about the **when** and **what** of a pull request\n- create small and self-contained pull request that focus on one thing\n- be mindful about biases\n- be respectful to the author and fellow reviewers\n- take decisive review action as soon as possible\n\n## References\n\n- [The Pushback Effects of Race, Ethnicity, Gender, and Age in Code Review](https://cacm.acm.org/magazines/2022/3/258909-the-pushback-effects-of-race-ethnicity-gender-and-age-in-code-review/fulltext) - Emerson Murphy-Hill, Ciera Jaspan, Carolyn Egelman, Lan Cheng\n- [Using research to make code review more equitable](https://developers.googleblog.com/2022/06/Using-research-to-make-code-review-more-equitable.html) - Emerson Murphy-Hill, Research Scientist, Central Product Inclusion, Equity, and Accessibility\n- [Best Practices for Code Review](https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/) - SMARTBEAR\n- [Small CLs](https://github.com/google/eng-practices/blob/master/review/developer/small-cls.md) - Google\n- [Stacked pull requests: make code reviews faster, easier, and more effective](https://www.michaelagreiler.com/stacked-pull-requests/) - Dr. Michaela Greiler\n- [Code reviews becoming a blocker](https://www.reddit.com/r/ExperiencedDevs/comments/oo4ds0/code_reviews_becoming_a_blocker/) - Reddit\n- [Code review bottleneck](https://www.reddit.com/r/agile/comments/e6gffn/code_review_bottleneck/) - Reddit\n- [Timeboxing](https://en.wikipedia.org/wiki/Timeboxing) - Wikipedia\n- [Mental Models: Learn How to Think Better and Gain a Mental Edge](https://jamesclear.com/mental-models) - James Clear\n- [AppLand extension for VSCode](https://github.com/getappmap/vscode-appland) - GitHub\n- [What to look for in a code review](https://github.com/google/eng-practices/blob/master/review/reviewer/looking-for.md#design) - Google\n- [https://www.boost.co.nz/blog/2010/09/acceptance-criteria](https://www.boost.co.nz/blog/2010/09/acceptance-criteria) - Nathan Donaldson\n- [Ex-Principal Engineer's Guide to Design Thinking and Continuous Delivery](/articles/ex-principal-engineers-guide-to-design-thinking-and-continous-delivery#what-is-continuous-deliver) - Daw-Chih Liou\n- [Add Class Private Identifier](https://github.com/airbnb/javascript/pull/2535) - GitHub\n- [ECMAScript¬Æ 2023 Language Specification](https://tc39.es/ecma262) - Ecma International\n- [Ecma TC39](https://github.com/tc39) - GitHub\n- [Getting ripped apart in code reviews, is this normal?](https://www.reddit.com/r/cscareerquestions/comments/9hakaz/getting_ripped_apart_in_code_reviews_is_this/) - Reddit\n- [Aggressive Code Review](https://blog.devgenius.io/aggressive-code-review-e5f8869f3967) - Bobi\n- [Modern Code Review: A Case Study at Google](https://storage.googleapis.com/pub-tools-public-publication-data/pdf/80735342aebcbfc8af4878373f842c25323cb985.pdf) - Caitlin Sadowski, Emma SoÃàderberg, Luke Church, Michal Sipko. Google, Inc.\n\n[1]: https://cacm.acm.org/magazines/2022/3/258909-the-pushback-effects-of-race-ethnicity-gender-and-age-in-code-review/fulltext\n[2]: https://developers.googleblog.com/2022/06/Using-research-to-make-code-review-more-equitable.html\n[3]: https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/\n[4]: https://github.com/google/eng-practices/blob/master/review/developer/small-cls.md\n[5]: https://www.michaelagreiler.com/stacked-pull-requests/\n[6]: https://www.reddit.com/r/ExperiencedDevs/comments/oo4ds0/code_reviews_becoming_a_blocker/\n[7]: https://www.reddit.com/r/agile/comments/e6gffn/code_review_bottleneck/\n[8]: https://en.wikipedia.org/wiki/Timeboxing\n[9]: https://jamesclear.com/mental-models\n[10]: https://github.com/getappmap/vscode-appland\n[11]: https://github.com/google/eng-practices/blob/master/review/reviewer/looking-for.md#design\n[12]: https://www.boost.co.nz/blog/2010/09/acceptance-criteria\n[13]: /articles/ex-principal-engineers-guide-to-design-thinking-and-continous-delivery#what-is-continuous-deliver\n[14]: https://github.com/airbnb/javascript/pull/2535\n[15]: https://tc39.es/ecma262\n[16]: https://github.com/tc39\n[17]: https://www.reddit.com/r/cscareerquestions/comments/9hakaz/getting_ripped_apart_in_code_reviews_is_this/\n[18]: https://blog.devgenius.io/aggressive-code-review-e5f8869f3967\n[19]: https://storage.googleapis.com/pub-tools-public-publication-data/pdf/80735342aebcbfc8af4878373f842c25323cb985.pdf\n\n---\n\nHere you have it! Thanks for reading throughüôå\nIf you find this article useful, please share it to help more people in their engineering journey.\n\nüê¶ Feel free to connect with me on [twitter](https://twitter.com/dawchihliou)!\n\n‚è≠ Ready for the next article? üëâ [**Deploying Like Vercel and Netlify with Cloud Run: Live, Preview, and Modern Workflow**](/articles/deploying-with-cloud-run-like-vercel-and-netlify)\n\nHappy coding!\n","code":"var Component=(()=>{var c=Object.create;var t=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var o=n=>t(n,\"__esModule\",{value:!0});var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),m=(n,e)=>{o(n);for(var r in e)t(n,r,{get:e[r],enumerable:!0})},f=(n,e,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of d(e))!u.call(n,a)&&a!==\"default\"&&t(n,a,{get:()=>e[a],enumerable:!(r=h(e,a))||r.enumerable});return n},w=n=>f(o(t(n!=null?c(p(n)):{},\"default\",n&&n.__esModule&&\"default\"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var s=g((q,l)=>{l.exports=_jsx_runtime});var y={};m(y,{default:()=>v});var i=w(s());function b(n={}){let e=Object.assign({h2:\"h2\",a:\"a\",span:\"span\",ul:\"ul\",li:\"li\",hr:\"hr\",p:\"p\",strong:\"strong\",h3:\"h3\",blockquote:\"blockquote\"},n.components),{wrapper:r}=e,a=(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h2,{id:\"tldr\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#tldr\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"TL;DR\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"\\u{1F3CE} Learn how to accelerate the code review process to maximize your productivity\"}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.span,{role:\"img\",\"aria-label\":\"microscope\",children:\"\\u{1F52C}\"}),\" Learn the best practices I came across for code reviewers\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.span,{role:\"img\",\"aria-label\":\"pencil\",children:\"\\u270F\\uFE0F\"}),\" Learn the best practices I came across for pull request authors\"]}),`\n`]}),`\n`,(0,i.jsx)(e.hr,{}),`\n`,(0,i.jsx)(e.p,{children:\"This article is also available on\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://levelup.gitconnected.com/tired-of-slow-code-reviews-read-this-1a26b3e4539a\",children:\"Level Up Coding\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://hackernoon.com/what-to-do-when-youre-tired-of-slow-code-reviews\",children:\"Hacker Noon\"})}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Feel free to read it on your favorite platform\",(0,i.jsx)(e.span,{role:\"img\",\"aria-label\":\"sparkles\",children:\"\\u2728\"})]}),`\n`,(0,i.jsx)(e.hr,{}),`\n`,(0,i.jsx)(e.p,{children:\"Imagine this.\"}),`\n`,(0,i.jsx)(e.p,{children:\"You just implemented a feature and wrote all the test cases. You felt great about the code so you opened a pull request and let your coworkers know. After days passing by, your pull request looked exactly the same as before. Seemingly untouched. No comment. No change request. You asked your coworkers again for code review and they agreed. Another week went by and nothing happened. You asked again and they told you that they needed more time because it wasn't a small PR and there was a lot to take into consideration.\"}),`\n`,(0,i.jsx)(e.p,{children:\"Finally, you saw a notification about a change request and you jumped on it right away. After resolving merge conflicts and fixing the edge cases, you requested a review again, and waited. Another change request appeared after a few days and you repeated the process again. You got an approval after another revision and the PR was finally merged to the trunk.\"}),`\n`,(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:\"After 4 weeks since you opened the PR.\"})}),`\n`,(0,i.jsxs)(e.p,{children:[\"If you can relate to it, you're not alone. Many teams experienced such a slow code review process. In fact, it's \",(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/ExperiencedDevs/comments/oo4ds0/code_reviews_becoming_a_blocker/\",children:\"one of the major blockers\"}),\" in the development cycle. So I want to share with you the best practices of code review I learned to speed up the development and help you ship code faster.\"]}),`\n`,(0,i.jsx)(e.p,{children:\"Let's go.\"}),`\n`,(0,i.jsxs)(e.h2,{id:\"for-pull-request-authors\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#for-pull-request-authors\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"For Pull Request Authors\"]}),`\n`,(0,i.jsx)(e.p,{children:\"The number one thing I've learned to boost code review productivity is to be thoughtful as an author. Other than producing clean code, there are many small things you can do to help your reviewers understand your pull requests proactively.\"}),`\n`,(0,i.jsxs)(e.h3,{id:\"be-the-driver\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#be-the-driver\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"Be The Driver\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"You, the author, are the driver of the pace. Knowing that you rely on your coworkers during the code review process, you can clearly communicate the \",(0,i.jsx)(e.strong,{children:\"when\"}),\" and \",(0,i.jsx)(e.strong,{children:\"what\"}),\" upfront to align expectations.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"The \",(0,i.jsx)(e.strong,{children:\"when\"}),\" is the most important to communicate because it tells your reviewers how urgent it is. The reviewers can plan their work accordingly. It's a great way to set a \",(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Timeboxing\",children:\"timebox\"}),\" for the review process, and it's also a great way to show respect to your coworkers' time.\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"To communicate the \",(0,i.jsx)(e.strong,{children:\"what\"}),\", make sure you include a PR description that focuses on helping your reviewers understand the purpose and code design of your changes. Instead of listing functionalities, start with an opening paragraph explaining the background and why this PR is needed helps the reviewers to build their \",(0,i.jsx)(e.a,{href:\"https://jamesclear.com/mental-models\",children:\"mental models\"}),\". Other descriptions I find very useful are:\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Code design diagrams\"}),\": a \",(0,i.jsx)(e.a,{href:\"https://github.com/getappmap/vscode-appland\",children:\"screenshot of your high-level code structure\"}),\" helps the reviewers to \",(0,i.jsx)(e.a,{href:\"https://github.com/google/eng-practices/blob/master/review/reviewer/looking-for.md#design\",children:\"review the overall design\"}),\" and react quickly to your pull request.\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:\"Acceptance Criteria\"}),\": a list of simple sentences like \",(0,i.jsx)(e.a,{href:\"https://www.boost.co.nz/blog/2010/09/acceptance-criteria\",children:'\"An acknowledgment email is sent to the user after submitting the form.\"'}),\" helps the reviews look for missing functionalities and test cases.\"]}),`\n`]}),`\n`,(0,i.jsxs)(e.h3,{id:\"keep-it-concise\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#keep-it-concise\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"Keep It Concise\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"Small, laser-focused pull requests are the easiest to read. How small? Google Engineering Practices say \",(0,i.jsx)(e.a,{href:\"https://github.com/google/eng-practices/blob/master/review/developer/small-cls.md\",children:`\"can't make it small enough\"`}),\". \",(0,i.jsx)(e.a,{href:\"https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/\",children:\"A study\"}),\" has shown that the code review quality decreases as the code change increases. The longer your reviewers review at a time, the less defects they catch. So it's important to keep your pull request small and focus on one thing. If the feature you're developing is too large, you can consider splitting it into multiple pull requests using the \",(0,i.jsx)(e.a,{href:\"https://www.michaelagreiler.com/stacked-pull-requests/\",children:'\"stacked pull request\"'}),\" technique.\"]}),`\n`,(0,i.jsx)(\"img\",{src:\"/optimized/articles/slow-code-review/stacked-pr.webp\",alt:\"stacked pull request visualization\",width:\"100%\",className:\"rounded centered\",loading:\"lazy\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"It replaces a large pull request with a sequence of small pull requests. It helps the reviewers to focus on one thing at the time and aligns brilliantly with the principal of \",(0,i.jsx)(e.a,{href:\"/articles/ex-principal-engineers-guide-to-design-thinking-and-continous-delivery#what-is-continuous-deliver\",children:\"continuous integration and continuous delivery\"}),\".\"]}),`\n`,(0,i.jsxs)(e.h2,{id:\"for-code-reviewers\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#for-code-reviewers\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"For Code Reviewers\"]}),`\n`,(0,i.jsxs)(e.h3,{id:\"be-mindful-about-biases\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#be-mindful-about-biases\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"Be Mindful about Biases\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"A \",(0,i.jsx)(e.a,{href:\"https://developers.googleblog.com/2022/06/Using-research-to-make-code-review-more-equitable.html\",children:\"study published by Google in 2022\"}),\" found that pull request authors faced different levels of pushback that varied depending on the authors' demographics. According to data, they \",(0,i.jsx)(e.a,{href:\"https://cacm.acm.org/magazines/2022/3/258909-the-pushback-effects-of-race-ethnicity-gender-and-age-in-code-review/fulltext\",children:\"found\"}),\" that\"]}),`\n`,(0,i.jsxs)(e.blockquote,{children:[`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Women faced 21% higher odds of pushback than men\"}),`\n`,(0,i.jsx)(e.li,{children:\"Black+ developers faced 54% higher odds than White+ developers\"}),`\n`,(0,i.jsx)(e.li,{children:\"Latinx+ developers faced 15% higher odds than White+ developers\"}),`\n`,(0,i.jsx)(e.li,{children:\"Asian+ developers faced 42% higher odds than White+ developers\"}),`\n`,(0,i.jsx)(e.li,{children:\"Older developers faced higher odds of pushback than younger developers\"}),`\n`]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"We should be more mindful about the unintentional biases, especially in a diverse workplace. By being aware of it, we can avoid unnecessary pushback in code reviews and help accelerate the process.\"}),`\n`,(0,i.jsxs)(e.h3,{id:\"its-a-great-place-for-learning-not-snob\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#its-a-great-place-for-learning-not-snob\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"It's A Great Place for Learning, Not Snob\"]}),`\n`,(0,i.jsxs)(e.p,{children:[`Regardless of your level of experience, working as a developer is about constant learning. Pull request is an invaluable \"marketplace\" for developers to communicate and exchange feedback. So make sure it's a place of respect and always `,(0,i.jsx)(e.a,{href:\"https://github.com/google/eng-practices/blob/master/review/reviewer/standard.md#mentoring\",children:\"aim for knowledge sharing\"}),\".\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"For me it has always been an amazing occasion to learn about domain knowledge. Take my PR in \",(0,i.jsx)(e.a,{href:\"https://github.com/airbnb/javascript/pull/2535\",children:\"Airbnb JavaScript Style Guide\"}),\", I learned so much about \",(0,i.jsx)(e.a,{href:\"https://tc39.es/ecma262\",children:\"ECMAScript Language Specification\"}),\" from a \",(0,i.jsx)(e.a,{href:\"https://github.com/tc39\",children:\"Ecma TC39\"}),\" member. If he was to dismiss my request \",(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/cscareerquestions/comments/9hakaz/getting_ripped_apart_in_code_reviews_is_this/\",children:\"without constructive feedback\"}),\", the teaching moment would have never exist.\"]}),`\n`,(0,i.jsxs)(e.h3,{id:\"inaction-is-bad\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#inaction-is-bad\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"Inaction Is Bad\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"I read about a blog post titled \",(0,i.jsx)(e.a,{href:\"https://blog.devgenius.io/aggressive-code-review-e5f8869f3967\",children:'\"Aggressive Code Review\"'}),\" by a tech lead at Instagram a year ago. He claimed that an effective code review consist of\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"decisive action ASAP\"}),`\n`,(0,i.jsx)(e.li,{children:\"aiming to reduce the cost of mistakes\"}),`\n`,(0,i.jsx)(e.li,{children:\"demanding small pull request and move fast\"}),`\n`]}),`\n`,(0,i.jsxs)(e.p,{children:[\"What I found refreshing in his approach is that \",(0,i.jsx)(e.strong,{children:\"not acting on a pull request is not an option\"}),\". It minimizes the lead time to review and it has been very beneficial to me and my team. We are able to ship fast because we take proactive actions to code review. We don't let pending pull requests linger and we review with our business cases in mind.\"]}),`\n`,(0,i.jsxs)(e.h2,{id:\"final-thoughts\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#final-thoughts\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"Final Thoughts\"]}),`\n`,(0,i.jsx)(e.p,{children:\"To recap the best practices of pull request and code review to accelerate your development cycle\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"establish clear communication about the \",(0,i.jsx)(e.strong,{children:\"when\"}),\" and \",(0,i.jsx)(e.strong,{children:\"what\"}),\" of a pull request\"]}),`\n`,(0,i.jsx)(e.li,{children:\"create small and self-contained pull request that focus on one thing\"}),`\n`,(0,i.jsx)(e.li,{children:\"be mindful about biases\"}),`\n`,(0,i.jsx)(e.li,{children:\"be respectful to the author and fellow reviewers\"}),`\n`,(0,i.jsx)(e.li,{children:\"take decisive review action as soon as possible\"}),`\n`]}),`\n`,(0,i.jsxs)(e.h2,{id:\"references\",children:[(0,i.jsx)(e.a,{className:\"anchor\",href:\"#references\",children:(0,i.jsx)(e.span,{className:\"icon icon-link\"})}),\"References\"]}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://cacm.acm.org/magazines/2022/3/258909-the-pushback-effects-of-race-ethnicity-gender-and-age-in-code-review/fulltext\",children:\"The Pushback Effects of Race, Ethnicity, Gender, and Age in Code Review\"}),\" - Emerson Murphy-Hill, Ciera Jaspan, Carolyn Egelman, Lan Cheng\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://developers.googleblog.com/2022/06/Using-research-to-make-code-review-more-equitable.html\",children:\"Using research to make code review more equitable\"}),\" - Emerson Murphy-Hill, Research Scientist, Central Product Inclusion, Equity, and Accessibility\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://smartbear.com/learn/code-review/best-practices-for-peer-code-review/\",children:\"Best Practices for Code Review\"}),\" - SMARTBEAR\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/google/eng-practices/blob/master/review/developer/small-cls.md\",children:\"Small CLs\"}),\" - Google\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://www.michaelagreiler.com/stacked-pull-requests/\",children:\"Stacked pull requests: make code reviews faster, easier, and more effective\"}),\" - Dr. Michaela Greiler\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/ExperiencedDevs/comments/oo4ds0/code_reviews_becoming_a_blocker/\",children:\"Code reviews becoming a blocker\"}),\" - Reddit\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/agile/comments/e6gffn/code_review_bottleneck/\",children:\"Code review bottleneck\"}),\" - Reddit\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Timeboxing\",children:\"Timeboxing\"}),\" - Wikipedia\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://jamesclear.com/mental-models\",children:\"Mental Models: Learn How to Think Better and Gain a Mental Edge\"}),\" - James Clear\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/getappmap/vscode-appland\",children:\"AppLand extension for VSCode\"}),\" - GitHub\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/google/eng-practices/blob/master/review/reviewer/looking-for.md#design\",children:\"What to look for in a code review\"}),\" - Google\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://www.boost.co.nz/blog/2010/09/acceptance-criteria\",children:\"https://www.boost.co.nz/blog/2010/09/acceptance-criteria\"}),\" - Nathan Donaldson\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"/articles/ex-principal-engineers-guide-to-design-thinking-and-continous-delivery#what-is-continuous-deliver\",children:\"Ex-Principal Engineer's Guide to Design Thinking and Continuous Delivery\"}),\" - Daw-Chih Liou\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/airbnb/javascript/pull/2535\",children:\"Add Class Private Identifier\"}),\" - GitHub\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://tc39.es/ecma262\",children:\"ECMAScript\\xAE 2023 Language Specification\"}),\" - Ecma International\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/tc39\",children:\"Ecma TC39\"}),\" - GitHub\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://www.reddit.com/r/cscareerquestions/comments/9hakaz/getting_ripped_apart_in_code_reviews_is_this/\",children:\"Getting ripped apart in code reviews, is this normal?\"}),\" - Reddit\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://blog.devgenius.io/aggressive-code-review-e5f8869f3967\",children:\"Aggressive Code Review\"}),\" - Bobi\"]}),`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://storage.googleapis.com/pub-tools-public-publication-data/pdf/80735342aebcbfc8af4878373f842c25323cb985.pdf\",children:\"Modern Code Review: A Case Study at Google\"}),\" - Caitlin Sadowski, Emma So\\u0308derberg, Luke Church, Michal Sipko. Google, Inc.\"]}),`\n`]}),`\n`,(0,i.jsx)(e.hr,{}),`\n`,(0,i.jsxs)(e.p,{children:[\"Here you have it! Thanks for reading through\",(0,i.jsx)(e.span,{role:\"img\",\"aria-label\":\"raising hands\",children:\"\\u{1F64C}\"}),`\nIf you find this article useful, please share it to help more people in their engineering journey.`]}),`\n`,(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.span,{role:\"img\",\"aria-label\":\"bird\",children:\"\\u{1F426}\"}),\" Feel free to connect with me on \",(0,i.jsx)(e.a,{href:\"https://twitter.com/dawchihliou\",children:\"twitter\"}),\"!\"]}),`\n`,(0,i.jsxs)(e.p,{children:[\"\\u23ED Ready for the next article? \",(0,i.jsx)(e.span,{role:\"img\",\"aria-label\":\"backhand index pointing right\",children:\"\\u{1F449}\"}),\" \",(0,i.jsx)(e.a,{href:\"/articles/deploying-with-cloud-run-like-vercel-and-netlify\",children:(0,i.jsx)(e.strong,{children:\"Deploying Like Vercel and Netlify with Cloud Run: Live, Preview, and Modern Workflow\"})})]}),`\n`,(0,i.jsx)(e.p,{children:\"Happy coding!\"})]});return r?(0,i.jsx)(r,Object.assign({},n,{children:a})):a}var v=b;return y;})();\n;return Component.default;"},"_id":"articles/tired-of-slow-code-reviews.mdx","_raw":{"sourceFilePath":"articles/tired-of-slow-code-reviews.mdx","sourceFileName":"tired-of-slow-code-reviews.mdx","sourceFileDir":"articles","bodyType":"mdx","flattenedPath":"articles/tired-of-slow-code-reviews"},"type":"Article","readingTime":{"text":"7 min read","minutes":6.915,"time":414900,"words":1383},"wordCount":1385,"slug":"tired-of-slow-code-reviews"}},"__N_SSG":true}