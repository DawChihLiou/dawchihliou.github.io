'use strict'
;(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
  [926],
  {
    2314: function (a) {
      a.exports = JSON.parse(
        '{"title":"Binary Tree Insertion in Rust","publishedAt":"January 13, 2022","description":"I was struggling with Rust\'s ownership when implementing a Binary Tree so I re-read about it. After taking my time understanding it and refactoring, I finally made a breakthroughüòé I\'m very excited to share with you the awesome features in Rust I came across. You\'ll see interesting concepts like smart pointers and ownership.","cover":"/optimized/articles/rust-binary-tree-insertion/hero.png","category":"Rust","coverWidth":"1411","coverHeight":"682","body":{"raw":"\\n## TL;DR\\n\\n- üå≥ We\'ll implement a Binary Tree together.\\n- üßë‚Äçüåæ We\'ll discuss a couple of ways to insert a node in a Binary Tree.\\n- üßë‚Äçüî¨ We\'ll discuss Rust\'s ownership in action.\\n- ‚ú® We\'ll touch on more features and syntax in Rust.\\n\\n---\\n\\nThis article is also available on\\n\\n- [Better Programming](https://betterprogramming.pub/binary-tree-insertion-in-rust-a2d969c3d33d)\\n- [Hacker Noon](https://hackernoon.com/how-to-insert-binary-tree-in-rust)\\n\\nFeel free to read it on your favorite platform‚ú®\\n\\n---\\n\\nI was struggling hard with Rust\'s ownership when implementing a Binary Tree so I pivoted and re-read about it.\\nAfter taking my time understanding it and refactoring my code, I finally made a breakthroughüòé\\nI\'m very excited to share with you the awesome features in Rust I came across.\\nYou\'ll see interesting concepts like smart pointers and ownership.\\n\\nLet\'s get it!\\n\\n## Data Structure\\n\\nA [Binary Tree](https://en.wikipedia.org/wiki/Binary_tree) data structure look like this:\\n\\n<img\\n  src=\\"/optimized/articles/rust-binary-tree-insertion/tree.webp\\"\\n  alt=\\"Binary tree data structure visualization\\"\\n  width=\\"100%\\"\\n  loading=\\"lazy\\"\\n/>\\n\\nEach node has no more than two child nodes. We refer them as `left` child and `right` child.\\nWe can translate the description into Rust code like this:\\n\\n```rust\\npub struct BinaryTree<T> {\\n    pub value: T,\\n    pub left: Option<Box<BinaryTree<T>>>,\\n    pub right: Option<Box<BinaryTree<T>>>,\\n}\\n```\\n\\nThe `BinaryTree` struct holds a value with the generic type `T`.\\nWe use [`Option` enum](https://doc.rust-lang.org/std/option/) to represent that the `left` and `right` child are both optional.\\n\\nA `Option<T>` is either a `Some` that contains a value of the type `T`, or a `None` that represents it doesn\'t.\\nBecause we are using `Option` to express whether a value is either something or nothing, the Rust compiler can check if we handle all the cases [to prevent bugs](https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html?highlight=option#the-option-enum-and-its-advantages-over-null-values).\\nComparing to JavaScript where we use [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null) value to express the same concept, `Option` encourages me to handle use cases upfront and it saves me a lot of trouble in runtime.\\n\\nThe [`Box`](https://doc.rust-lang.org/book/ch15-01-box.html) is one of the smart pointers.\\nIt saves an address that points to a data in memory.\\n`Box` helps us to create a `BinaryTree` struct with an unknown size, so that we can grow the Binary Tree by inserting nodes without thinking ahead how many nodes we\'ll have when creating the tree.\\n\\n[Memory management](http://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/the-stack-and-the-heap.html) is one of the reason Rust is so performing and interesting to learn.\\n\\n## Insertion\\n\\nBefore inserting a new Binary Tree node, we need to create an root. Let\'s implement it:\\n\\n```rust\\nimpl<T> BinaryTree<T> {\\n    pub fn new(value: T) -> Self {\\n        BinaryTree {\\n            value,\\n            left: None,\\n            right: None,\\n        }\\n    }\\n}\\n```\\n\\nThe `new` [associated function](https://doc.rust-lang.org/book/ch05-03-method-syntax.html#associated-functions) takes the value of `T` and return a `BinaryTree` that holds the value and no child nodes.\\n\\nNow that we can use `BinaryTree::new` to create a root node, we can think about how to insert child nodes.\\nIntuitively, it would be great if we can insert left or right child node by calling methods on the root node instance. Like this:\\n\\n```rust\\nBinaryTree::new(1)\\n  .left(BinaryTree::new(2))\\n  .right(BinaryTree::new(3))\\n```\\n\\nLuckily, I found an [great article](https://endler.dev/2017/boxes-and-trees/) from my friend at trivago, [Matthias](https://twitter.com/matthiasendler), explaining exactly how to implement it.\\n\\n```rust\\nimpl<T> BinaryTree<T> {\\n    pub fn new(value: T) -> Self {\\n        BinaryTree {\\n            value,\\n            left: None,\\n            right: None,\\n        }\\n    }\\n\\n    pub fn left(mut self, node: BinaryTree<T>) -> Self {\\n        self.left = Some(Box::new(node));\\n        self\\n    }\\n\\n    pub fn right(mut self, node: BinaryTree<T>) -> Self {\\n        self.right = Some(Box::new(node));\\n        self\\n    }\\n}\\n```\\n\\nNow let\'s write some tests to make sure the associated functions work:\\n\\n```rust\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn create_new_tree() {\\n        let tree = BinaryTree::new(1);\\n\\n        assert_eq!(tree.value, 1);\\n    }\\n\\n    #[test]\\n    fn insert_left() {\\n        let tree = BinaryTree::new(1).left(BinaryTree::new(2));\\n\\n        if let Some(node) = tree.left {\\n            assert_eq!(node.value, 2);\\n        }\\n\\n        assert_eq!(tree.right, None);\\n    }\\n\\n    #[test]\\n    fn insert_right() {\\n        let tree = BinaryTree::new(1).right(BinaryTree::new(2));\\n\\n        if let Some(node) = tree.right {\\n            assert_eq!(node.value, 2);\\n        }\\n\\n        assert_eq!(tree.left, None);\\n    }\\n}\\n```\\n\\nü•≥\\n\\n## Breadth-First Insertion\\n\\nThe insertion methods are very flexible and we can easily create a tree in just a few lines:\\n\\n```rust\\nBinaryTree::new(1)\\n    .left(\\n        BinaryTree::new(2)\\n            .left(BinaryTree::new(4))\\n            .right(BinaryTree::new(5))\\n    )\\n    .right(BinaryTree::new(3))\\n```\\n\\nThe code creates a Binary Tree like this:\\n\\n<img\\n  src=\\"/optimized/articles/rust-binary-tree-insertion/tree-3.webp\\"\\n  alt=\\"A simple Binary Tree example\\"\\n  width=\\"100%\\"\\n  loading=\\"lazy\\"\\n/>\\n\\nIt got me thinking.\\n\\n> If I just want to create a [balanced Binary Tree](https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees) without any other requirements, can I insert a node and the tree finds the next available spot for me?\\n\\nSomething like this:\\n\\n```rust\\nlet mut root = BinaryTree::new(1);\\nroot.insert(2);\\nroot.insert(3);\\nroot.insert(4);\\nroot.insert(5);\\n```\\n\\nand it creates the same tree structure as we saw above.\\n\\nWe can achieve it by traverse the tree in the [breadth-first](https://en.wikipedia.org/wiki/Breadth-first_search) fashion and insert a node as soon as we found an absent child node.\\n\\nThe easiest way to implement a breath-first traversal is with a [Queue](<https://en.wikipedia.org/wiki/Queue_(abstract_data_type)>).\\nRust has a [`VecDequeue`](https://doc.rust-lang.org/std/collections/struct.VecDeque.html) in the standard library we can use.\\n\\n```rust\\npub fn insert(&mut self, new_value: T) {\\n    let mut queue: VecDeque<&mut BinaryTree<T>> = VecDeque::new();\\n    queue.push_front(self);\\n\\n    loop {\\n        let BinaryTree {\\n            ref mut left,\\n            ref mut right,\\n            ..\\n        } = queue.pop_back().unwrap();\\n\\n        match left {\\n            Some(node) => {\\n                queue.push_front(node);\\n            }\\n            None => {\\n                *left = Some(Box::new(BinaryTree::new(new_value)));\\n                return;\\n            }\\n        }\\n\\n        match right {\\n            Some(node) => {\\n                queue.push_front(node);\\n            }\\n            None => {\\n                *right = Some(Box::new(BinaryTree::new(new_value)));\\n                return;\\n            }\\n        }\\n    }\\n}\\n```\\n\\nThe algorithm is to force the loop to visit sibling nodes first, from left to right, before visiting the next layer of child nodes.\\nIn each iteration, we\'ll check if either the `left` or `right` child is absent.\\nIf we found one, that\'s the next available spot for the new node.\\n\\nIt\'s a rather straightforward algorithm but [I struggled to get it right](https://www.reddit.com/r/rust/comments/ry34vr/problem_with_implementing_binary_tree_insertion/).\\nThe problem was that I didn\'t understand [ownership in Rust](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html).\\n\\nLet\'s go through the `insert` method together.\\n\\nFirst thing we want to decide is how do we want to use the first argument `self`.\\n`self` is referring to the `BinaryTree` instance the method is called on.\\nWhat we need from `self` is to be able to mutate the `left` and `right` child node so that we can insert a new node.\\nSimply passing in a mutable reference `&mut self` will do the job because the method don\'t need to take ownership of `self`.\\n\\nFor the `VecDeque` item data type, we can use the same data type as `self` to store mutable references of `BinaryTree`.\\n\\nWhen popping the queue inside the loop, we want to use a mutable reference to `left` and `right` because we want to insert the new node.\\n\\nWhen inserting the new node, we [dereference](https://doc.rust-lang.org/book/ch15-02-deref.html) the `left` and `right` to allow the new node assignment, like this: `*left = Some(Box::new(BinaryTree::new(new_value)))`.\\n\\nIt took me some time to figure out how to borrow or move the data in the method.\\nOnce I got it, it make so much sense!\\n\\nLet\'s write some tests for itüßë‚Äçüî¨\\n\\n```rust\\n#[test]\\nfn insert() {\\n    let mut tree = BinaryTree::new(1);\\n    tree.insert(2);\\n    tree.insert(3);\\n    tree.insert(4);\\n    tree.insert(5);\\n\\n    assert_eq!(\\n        tree,\\n        BinaryTree::new(1)\\n            .left(\\n                BinaryTree::new(2)\\n                    .left(BinaryTree::new(4))\\n                    .right(BinaryTree::new(5))\\n            )\\n            .right(BinaryTree::new(3))\\n    );\\n\\n    tree.insert(6);\\n\\n    assert_eq!(\\n        tree,\\n        BinaryTree::new(1)\\n            .left(\\n                BinaryTree::new(2)\\n                    .left(BinaryTree::new(4))\\n                    .right(BinaryTree::new(5))\\n            )\\n            .right(BinaryTree::new(3).left(BinaryTree::new(6)))\\n    )\\n}\\n```\\n\\nIf we run the tests, you\'ll see a error message like this:\\n\\n<img\\n  src=\\"/optimized/articles/rust-binary-tree-insertion/error-partial-equal.webp\\"\\n  alt=\\"Test aborted because of the Copy Trait is not implemented\\"\\n  width=\\"100%\\"\\n  loading=\\"lazy\\"\\n/>\\n\\nIt\'s because the trees couldn\'t compare with each other.\\nWe can fix it by adding [`PartialEq`](https://doc.rust-lang.org/std/cmp/trait.PartialEq.html) trait to the `BinaryTree` struct.\\n\\n```diff\\n+ #[derive(PartialEq)]\\npub struct BinaryTree<T> {\\n    pub value: T,\\n    pub left: Option<Box<BinaryTree<T>>>,\\n    pub right: Option<Box<BinaryTree<T>>>,\\n}\\n```\\n\\nü•≥\\n\\n## Converting Array into Binary Tree\\n\\nNow that we have an automatic insertion with the `insert` method, we can consider creating a balanced tree in a more convenient way.\\nFor example, I want to have something similar to [`Vec::from`](https://doc.rust-lang.org/std/vec/struct.Vec.html#examples): an associated function `BinaryTree::from` that takes in an array and returns a balanced `BinaryTree`.\\n\\nLet\'s write a test to visualize the use case better:\\n\\n```rust\\n#[test]\\nfn create_new_tree_with_from() {\\n    // `BinaryTree::from` takes in a reference of an array because borrowing is sufficient\\n    let tree = BinaryTree::from(&[1, 2, 3, 4, 5, 6]);\\n\\n    assert_eq!(\\n        tree,\\n        BinaryTree::new(1)\\n            .left(\\n                BinaryTree::new(2)\\n                    .left(BinaryTree::new(4))\\n                    .right(BinaryTree::new(5))\\n            )\\n            .right(BinaryTree::new(3).left(BinaryTree::new(6)))\\n    )\\n}\\n```\\n\\nTo implement `BinaryTree::from`, we can simply iterate through the array and using the `insert` method to create the tree structure.\\n\\n```rust\\nimpl<T> BinaryTree<T> {\\n    pub fn from(new_values: &[T]) -> Self {\\n        let (first, rest) = new_values.split_first().unwrap();\\n        let mut root: BinaryTree<T> = BinaryTree::new(*first);\\n\\n        for value in rest {\\n            root.insert(*value)\\n        }\\n        root\\n    }\\n}\\n```\\n\\nIn the function, we created a root node from the first array element and then insert the rest element in the tree one by one.\\n\\nIf you try to test it, you\'ll see an error message like this:\\n\\n<img\\n  src=\\"/optimized/articles/rust-binary-tree-insertion/error-copy-trait.webp\\"\\n  alt=\\"Test aborted because of the Copy Trait is not implemented\\"\\n  width=\\"100%\\"\\n  loading=\\"lazy\\"\\n/>\\n\\nWe can fix it by specifying the type `T` implements the [`Copy`](https://doc.rust-lang.org/std/marker/trait.Copy.html) trait.\\n\\n```diff\\n- impl<T> BinaryTree<T> {\\n+ impl<T> BinaryTree<T>\\n+ where\\n+     T: Copy,\\n+ {\\n```\\n\\nThe reason is that the `insert` method actually take ownership over `new_value`.\\nIn order to keep the program memory save, the compiler didn\'t allow us to \\"move\\" the array elements into the `insert` method because the array might be referenced in other parts of the program.\\nSo what we can do is to pass in a copy (duplicate) of an array element.\\n\\nNow it should work!\\n\\n## Final Thought\\n\\nThat\'s it! The full implementation of our Binary Tree assertion is here‚¨áÔ∏è\\n\\n```rust\\n#[derive(Debug, PartialEq)]\\npub struct BinaryTree<T> {\\n    pub value: T,\\n    pub left: Option<Box<BinaryTree<T>>>,\\n    pub right: Option<Box<BinaryTree<T>>>,\\n}\\n\\nimpl<T> BinaryTree<T>\\nwhere\\n    T: Copy,\\n{\\n    ///\\n    /// Create a new Binary Tree node.\\n    ///\\n    pub fn new(value: T) -> Self {\\n        BinaryTree {\\n            value,\\n            left: None,\\n            right: None,\\n        }\\n    }\\n\\n    ///\\n    /// Create a balanced tree from an array reference.\\n    ///\\n    pub fn from(new_values: &[T]) -> Self {\\n        let (first, rest) = new_values.split_first().unwrap();\\n        let mut root: BinaryTree<T> = BinaryTree::new(*first);\\n\\n        for value in rest {\\n            root.insert(*value)\\n        }\\n        root\\n    }\\n\\n    ///\\n    /// Insert a tree node in the next available branch with breadth first traversal.\\n    ///\\n    pub fn insert(&mut self, new_value: T) {\\n        let mut queue: VecDeque<&mut BinaryTree<T>> = VecDeque::new();\\n        queue.push_front(self);\\n        loop {\\n            let BinaryTree {\\n                ref mut left,\\n                ref mut right,\\n                ..\\n            } = queue.pop_back().unwrap();\\n\\n            match left {\\n                Some(node) => {\\n                    queue.push_front(node);\\n                }\\n                None => {\\n                    *left = Some(Box::new(BinaryTree::new(new_value)));\\n                    return;\\n                }\\n            }\\n\\n            match right {\\n                Some(node) => {\\n                    queue.push_front(node);\\n                }\\n                None => {\\n                    *right = Some(Box::new(BinaryTree::new(new_value)));\\n                    return;\\n                }\\n            }\\n        }\\n    }\\n\\n    ///\\n    /// Insert a left child node.\\n    ///\\n    pub fn left(mut self, node: BinaryTree<T>) -> Self {\\n        self.left = Some(Box::new(node));\\n        self\\n    }\\n\\n    ///\\n    /// Insert a right child node.\\n    ///\\n    pub fn right(mut self, node: BinaryTree<T>) -> Self {\\n        self.right = Some(Box::new(node));\\n        self\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn create_new_tree() {\\n        let tree = BinaryTree::new(1);\\n\\n        assert_eq!(tree.value, 1);\\n    }\\n\\n    #[test]\\n    fn insert_left() {\\n        let tree = BinaryTree::new(1).left(BinaryTree::new(2));\\n\\n        if let Some(node) = tree.left {\\n            assert_eq!(node.value, 2);\\n        }\\n\\n        assert_eq!(tree.right, None);\\n    }\\n\\n    #[test]\\n    fn insert_right() {\\n        let tree = BinaryTree::new(1).right(BinaryTree::new(2));\\n\\n        if let Some(node) = tree.right {\\n            assert_eq!(node.value, 2);\\n        }\\n\\n        assert_eq!(tree.left, None);\\n    }\\n\\n    #[test]\\n    fn insert() {\\n        let mut tree = BinaryTree::new(1);\\n        tree.insert(2);\\n        tree.insert(3);\\n        tree.insert(4);\\n        tree.insert(5);\\n\\n        assert_eq!(\\n            tree,\\n            BinaryTree::new(1)\\n                .left(\\n                    BinaryTree::new(2)\\n                        .left(BinaryTree::new(4))\\n                        .right(BinaryTree::new(5))\\n                )\\n                .right(BinaryTree::new(3))\\n        );\\n\\n        tree.insert(6);\\n\\n        assert_eq!(\\n            tree,\\n            BinaryTree::new(1)\\n                .left(\\n                    BinaryTree::new(2)\\n                        .left(BinaryTree::new(4))\\n                        .right(BinaryTree::new(5))\\n                )\\n                .right(BinaryTree::new(3).left(BinaryTree::new(6)))\\n        )\\n    }\\n\\n    #[test]\\n    fn create_new_tree_from() {\\n        let tree = BinaryTree::from(&[1, 2, 3, 4, 5, 6]);\\n\\n        assert_eq!(\\n            tree,\\n            BinaryTree::new(1)\\n                .left(\\n                    BinaryTree::new(2)\\n                        .left(BinaryTree::new(4))\\n                        .right(BinaryTree::new(5))\\n                )\\n                .right(BinaryTree::new(3).left(BinaryTree::new(6)))\\n        )\\n    }\\n}\\n```\\n\\n## Reference\\n\\n- [Binary Tree](https://en.wikipedia.org/wiki/Binary_tree)\\n- [Balanced Binary Tree](https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)\\n- [Breadth-First Search](https://en.wikipedia.org/wiki/Breadth-first_search)\\n- [Queue](<https://en.wikipedia.org/wiki/Queue_(abstract_data_type)>)\\n- [Rust `Option` Type](https://doc.rust-lang.org/std/option/)\\n- [Rust `Box` Pointer](https://doc.rust-lang.org/book/ch15-01-box.html)\\n- [Rust `VecDequeue`](https://doc.rust-lang.org/std/collections/struct.VecDeque.html)\\n- [Rust `PartialEq` Trait](https://doc.rust-lang.org/std/cmp/trait.PartialEq.html)\\n- [Rust `Copy` Trait](https://doc.rust-lang.org/std/marker/trait.Copy.html)\\n- [Rust `Vec::from`](https://doc.rust-lang.org/std/vec/struct.Vec.html#examples)\\n- [Rust Associated Function](https://doc.rust-lang.org/book/ch05-03-method-syntax.html#associated-functions)\\n- [Rust Ownership](https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html)\\n- [JavaSCript `null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)\\n- [The Stack and the Heap](http://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/the-stack-and-the-heap.html)\\n- [Of Boxes and Trees - Smart Pointers in Rust](https://endler.dev/2017/boxes-and-trees/)\\n- [Problem with Implementing Binary Tree Insertion](https://www.reddit.com/r/rust/comments/ry34vr/problem_with_implementing_binary_tree_insertion/)\\n- [The Option Enum and Its Advantages Over Null Values](https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html?highlight=option#the-option-enum-and-its-advantages-over-null-values)\\n- [Treating Smart Pointers Like Regular References with the Deref Trait](https://doc.rust-lang.org/book/ch15-02-deref.html)\\n\\n---\\n\\nüí¨ Comments on [Reddit](https://www.reddit.com/r/rust/comments/s3u7fk/binary_tree_insertion_in_rust/).\\n\\n---\\n\\nHere you have it! Thanks for reading throughüôå\\n\\nIf you find it useful, please share this article to help more people in their engineering journey.\\n\\nFeel free to connect with me on [twitter](https://twitter.com/dawchihliou)!\\n\\nIf you\'re interested in Unicode in Rust and JavaScript, I wrote an article [\\"Indexing Strings in Rust and TypeScript: A Case Study of String\\"](/articles/indexing-strings-in-rust-and-typescript).\\nThere we discussed how Rust and JavaScript handle strings with a classic algorithm.\\n\\nIf you\'re interested in writing a CLI with TypeScript and implementing a real-world CLI application with Google Lighthouse integration, check out my previous article [\\"Writing Your Own TypeScript CLI\\"](/articles/writing-your-own-typescript-cli).\\n\\nIf you\'re wondering how to test Redux Observable, I wrote an article [\\"Writing Better Marble Tests for Redux Observable andTypeScript\\"](https://itnext.io/better-marble-test-70c7676a1e2) just for you.\\nIt\'s a comprehensive guide to walk you through the thought process.\\n\\nHappy coding!\\n","code":"var Component=(()=>{var r=Object.create;var l=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var d=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var t=a=>l(a,\\"__esModule\\",{value:!0});var u=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),N=(a,n)=>{t(a);for(var s in n)l(a,s,{get:n[s],enumerable:!0})},k=(a,n,s)=>{if(n&&typeof n==\\"object\\"||typeof n==\\"function\\")for(let c of d(n))!m.call(a,c)&&c!==\\"default\\"&&l(a,c,{get:()=>n[c],enumerable:!(s=p(n,c))||s.enumerable});return a},f=a=>k(t(l(a!=null?r(h(a)):{},\\"default\\",a&&a.__esModule&&\\"default\\"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var o=u((T,i)=>{i.exports=_jsx_runtime});var g={};N(g,{default:()=>y});var e=f(o());function w(a={}){let n=Object.assign({h2:\\"h2\\",a:\\"a\\",span:\\"span\\",ul:\\"ul\\",li:\\"li\\",hr:\\"hr\\",p:\\"p\\",code:\\"code\\",pre:\\"pre\\",blockquote:\\"blockquote\\"},a.components),{wrapper:s}=n,c=(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h2,{id:\\"tldr\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#tldr\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"TL;DR\\"]}),`\\n`,(0,e.jsxs)(n.ul,{children:[`\\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"deciduous tree\\",children:\\"\\\\u{1F333}\\"}),\\" We\'ll implement a Binary Tree together.\\"]}),`\\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"\\",\\"aria-hidden\\":!0,children:\\"\\\\u{1F9D1}\\"}),\\"\\\\u200D\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"sheaf of rice\\",children:\\"\\\\u{1F33E}\\"}),\\" We\'ll discuss a couple of ways to insert a node in a Binary Tree.\\"]}),`\\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"\\",\\"aria-hidden\\":!0,children:\\"\\\\u{1F9D1}\\"}),\\"\\\\u200D\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"microscope\\",children:\\"\\\\u{1F52C}\\"}),\\" We\'ll discuss Rust\'s ownership in action.\\"]}),`\\n`,(0,e.jsxs)(n.li,{children:[(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"sparkles\\",children:\\"\\\\u2728\\"}),\\" We\'ll touch on more features and syntax in Rust.\\"]}),`\\n`]}),`\\n`,(0,e.jsx)(n.hr,{}),`\\n`,(0,e.jsx)(n.p,{children:\\"This article is also available on\\"}),`\\n`,(0,e.jsxs)(n.ul,{children:[`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://betterprogramming.pub/binary-tree-insertion-in-rust-a2d969c3d33d\\",children:\\"Better Programming\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://hackernoon.com/how-to-insert-binary-tree-in-rust\\",children:\\"Hacker Noon\\"})}),`\\n`]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Feel free to read it on your favorite platform\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"sparkles\\",children:\\"\\\\u2728\\"})]}),`\\n`,(0,e.jsx)(n.hr,{}),`\\n`,(0,e.jsxs)(n.p,{children:[`I was struggling hard with Rust\'s ownership when implementing a Binary Tree so I pivoted and re-read about it.\\nAfter taking my time understanding it and refactoring my code, I finally made a breakthrough`,(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"smiling face with sunglasses\\",children:\\"\\\\u{1F60E}\\"}),`\\nI\'m very excited to share with you the awesome features in Rust I came across.\\nYou\'ll see interesting concepts like smart pointers and ownership.`]}),`\\n`,(0,e.jsx)(n.p,{children:\\"Let\'s get it!\\"}),`\\n`,(0,e.jsxs)(n.h2,{id:\\"data-structure\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#data-structure\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"Data Structure\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"A \\",(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Binary_tree\\",children:\\"Binary Tree\\"}),\\" data structure look like this:\\"]}),`\\n`,(0,e.jsx)(\\"img\\",{src:\\"/optimized/articles/rust-binary-tree-insertion/tree.webp\\",alt:\\"Binary tree data structure visualization\\",width:\\"100%\\",loading:\\"lazy\\"}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Each node has no more than two child nodes. We refer them as \\",(0,e.jsx)(n.code,{children:\\"left\\"}),\\" child and \\",(0,e.jsx)(n.code,{children:\\"right\\"}),` child.\\nWe can translate the description into Rust code like this:`]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"struct\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token type-definition class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Option\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">>\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Option\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">>\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"The \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),\\" struct holds a value with the generic type \\",(0,e.jsx)(n.code,{children:\\"T\\"}),`.\\nWe use `,(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/std/option/\\",children:[(0,e.jsx)(n.code,{children:\\"Option\\"}),\\" enum\\"]}),\\" to represent that the \\",(0,e.jsx)(n.code,{children:\\"left\\"}),\\" and \\",(0,e.jsx)(n.code,{children:\\"right\\"}),\\" child are both optional.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"A \\",(0,e.jsx)(n.code,{children:\\"Option<T>\\"}),\\" is either a \\",(0,e.jsx)(n.code,{children:\\"Some\\"}),\\" that contains a value of the type \\",(0,e.jsx)(n.code,{children:\\"T\\"}),\\", or a \\",(0,e.jsx)(n.code,{children:\\"None\\"}),` that represents it doesn\'t.\\nBecause we are using `,(0,e.jsx)(n.code,{children:\\"Option\\"}),\\" to express whether a value is either something or nothing, the Rust compiler can check if we handle all the cases \\",(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html?highlight=option#the-option-enum-and-its-advantages-over-null-values\\",children:\\"to prevent bugs\\"}),`.\\nComparing to JavaScript where we use `,(0,e.jsx)(n.a,{href:\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\\",children:(0,e.jsx)(n.code,{children:\\"null\\"})}),\\" value to express the same concept, \\",(0,e.jsx)(n.code,{children:\\"Option\\"}),\\" encourages me to handle use cases upfront and it saves me a lot of trouble in runtime.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"The \\",(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch15-01-box.html\\",children:(0,e.jsx)(n.code,{children:\\"Box\\"})}),` is one of the smart pointers.\\nIt saves an address that points to a data in memory.\\n`,(0,e.jsx)(n.code,{children:\\"Box\\"}),\\" helps us to create a \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),\\" struct with an unknown size, so that we can grow the Binary Tree by inserting nodes without thinking ahead how many nodes we\'ll have when creating the tree.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\\"http://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/the-stack-and-the-heap.html\\",children:\\"Memory management\\"}),\\" is one of the reason Rust is so performing and interesting to learn.\\"]}),`\\n`,(0,e.jsxs)(n.h2,{id:\\"insertion\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#insertion\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"Insertion\\"]}),`\\n`,(0,e.jsx)(n.p,{children:\\"Before inserting a new Binary Tree node, we need to create an root. Let\'s implement it:\\"}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"impl\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"The \\",(0,e.jsx)(n.code,{children:\\"new\\"}),\\" \\",(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch05-03-method-syntax.html#associated-functions\\",children:\\"associated function\\"}),\\" takes the value of \\",(0,e.jsx)(n.code,{children:\\"T\\"}),\\" and return a \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),\\" that holds the value and no child nodes.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Now that we can use \\",(0,e.jsx)(n.code,{children:\\"BinaryTree::new\\"}),` to create a root node, we can think about how to insert child nodes.\\nIntuitively, it would be great if we can insert left or right child node by calling methods on the root node instance. Like this:`]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"  \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"  \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]})]})}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Luckily, I found an \\",(0,e.jsx)(n.a,{href:\\"https://endler.dev/2017/boxes-and-trees/\\",children:\\"great article\\"}),\\" from my friend at trivago, \\",(0,e.jsx)(n.a,{href:\\"https://twitter.com/matthiasendler\\",children:\\"Matthias\\"}),\\", explaining exactly how to implement it.\\"]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"impl\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"left \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"right \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:\\"Now let\'s write some tests to make sure the associated functions work:\\"}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[cfg(test)]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mod\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token module-declaration namespace\\",children:\\"tests\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"use\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"super\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"create_new_tree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert_left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"if\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"left \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert_right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"if\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"right \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"\\",\\"aria-hidden\\":!0,children:\\"\\\\u{1F973}\\"})}),`\\n`,(0,e.jsxs)(n.h2,{id:\\"breadth-first-insertion\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#breadth-first-insertion\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"Breadth-First Insertion\\"]}),`\\n`,(0,e.jsx)(n.p,{children:\\"The insertion methods are very flexible and we can easily create a tree in just a few lines:\\"}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:\\"The code creates a Binary Tree like this:\\"}),`\\n`,(0,e.jsx)(\\"img\\",{src:\\"/optimized/articles/rust-binary-tree-insertion/tree-3.webp\\",alt:\\"A simple Binary Tree example\\",width:\\"100%\\",loading:\\"lazy\\"}),`\\n`,(0,e.jsx)(n.p,{children:\\"It got me thinking.\\"}),`\\n`,(0,e.jsxs)(n.blockquote,{children:[`\\n`,(0,e.jsxs)(n.p,{children:[\\"If I just want to create a \\",(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\\",children:\\"balanced Binary Tree\\"}),\\" without any other requirements, can I insert a node and the tree finds the next available spot for me?\\"]}),`\\n`]}),`\\n`,(0,e.jsx)(n.p,{children:\\"Something like this:\\"}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" root \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:\\"and it creates the same tree structure as we saw above.\\"}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"We can achieve it by traverse the tree in the \\",(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Breadth-first_search\\",children:\\"breadth-first\\"}),\\" fashion and insert a node as soon as we found an absent child node.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"The easiest way to implement a breath-first traversal is with a \\",(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)\\",children:\\"Queue\\"}),`.\\nRust has a `,(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/std/collections/struct.VecDeque.html\\",children:(0,e.jsx)(n.code,{children:\\"VecDequeue\\"})}),\\" in the standard library we can use.\\"]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" new_value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"VecDeque\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"VecDeque\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"push_front\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"loop\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"ref\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"ref\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"..\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"pop_back\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"unwrap\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"match\\"}),\\" left \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"push_front\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"left \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"new_value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"return\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"match\\"}),\\" right \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"push_front\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"right \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"new_value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"return\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsxs)(n.p,{children:[`The algorithm is to force the loop to visit sibling nodes first, from left to right, before visiting the next layer of child nodes.\\nIn each iteration, we\'ll check if either the `,(0,e.jsx)(n.code,{children:\\"left\\"}),\\" or \\",(0,e.jsx)(n.code,{children:\\"right\\"}),` child is absent.\\nIf we found one, that\'s the next available spot for the new node.`]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"It\'s a rather straightforward algorithm but \\",(0,e.jsx)(n.a,{href:\\"https://www.reddit.com/r/rust/comments/ry34vr/problem_with_implementing_binary_tree_insertion/\\",children:\\"I struggled to get it right\\"}),`.\\nThe problem was that I didn\'t understand `,(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\\",children:\\"ownership in Rust\\"}),\\".\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Let\'s go through the \\",(0,e.jsx)(n.code,{children:\\"insert\\"}),\\" method together.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"First thing we want to decide is how do we want to use the first argument \\",(0,e.jsx)(n.code,{children:\\"self\\"}),`.\\n`,(0,e.jsx)(n.code,{children:\\"self\\"}),\\" is referring to the \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),` instance the method is called on.\\nWhat we need from `,(0,e.jsx)(n.code,{children:\\"self\\"}),\\" is to be able to mutate the \\",(0,e.jsx)(n.code,{children:\\"left\\"}),\\" and \\",(0,e.jsx)(n.code,{children:\\"right\\"}),` child node so that we can insert a new node.\\nSimply passing in a mutable reference `,(0,e.jsx)(n.code,{children:\\"&mut self\\"}),\\" will do the job because the method don\'t need to take ownership of \\",(0,e.jsx)(n.code,{children:\\"self\\"}),\\".\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"For the \\",(0,e.jsx)(n.code,{children:\\"VecDeque\\"}),\\" item data type, we can use the same data type as \\",(0,e.jsx)(n.code,{children:\\"self\\"}),\\" to store mutable references of \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),\\".\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"When popping the queue inside the loop, we want to use a mutable reference to \\",(0,e.jsx)(n.code,{children:\\"left\\"}),\\" and \\",(0,e.jsx)(n.code,{children:\\"right\\"}),\\" because we want to insert the new node.\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"When inserting the new node, we \\",(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch15-02-deref.html\\",children:\\"dereference\\"}),\\" the \\",(0,e.jsx)(n.code,{children:\\"left\\"}),\\" and \\",(0,e.jsx)(n.code,{children:\\"right\\"}),\\" to allow the new node assignment, like this: \\",(0,e.jsx)(n.code,{children:\\"*left = Some(Box::new(BinaryTree::new(new_value)))\\"}),\\".\\"]}),`\\n`,(0,e.jsx)(n.p,{children:`It took me some time to figure out how to borrow or move the data in the method.\\nOnce I got it, it make so much sense!`}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Let\'s write some tests for it\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"\\",\\"aria-hidden\\":!0,children:\\"\\\\u{1F9D1}\\"}),\\"\\\\u200D\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"microscope\\",children:\\"\\\\u{1F52C}\\"})]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:\\"If we run the tests, you\'ll see a error message like this:\\"}),`\\n`,(0,e.jsx)(\\"img\\",{src:\\"/optimized/articles/rust-binary-tree-insertion/error-partial-equal.webp\\",alt:\\"Test aborted because of the Copy Trait is not implemented\\",width:\\"100%\\",loading:\\"lazy\\"}),`\\n`,(0,e.jsxs)(n.p,{children:[`It\'s because the trees couldn\'t compare with each other.\\nWe can fix it by adding `,(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\\",children:(0,e.jsx)(n.code,{children:\\"PartialEq\\"})}),\\" trait to the \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),\\" struct.\\"]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-diff\\",children:(0,e.jsxs)(n.code,{className:\\"language-diff code-highlight\\",children:[(0,e.jsx)(n.span,{className:\\"code-line inserted\\",children:(0,e.jsxs)(n.span,{className:\\"token inserted-sign inserted\\",children:[(0,e.jsx)(n.span,{className:\\"token prefix inserted\\",children:\\"+\\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:` #[derive(PartialEq)]\\n`})]})}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token inserted-sign inserted\\",children:(0,e.jsx)(n.span,{className:\\"token line\\"})}),`pub struct BinaryTree<T> {\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:(0,e.jsxs)(n.span,{className:\\"token unchanged\\",children:[(0,e.jsx)(n.span,{className:\\"token prefix unchanged\\",children:\\" \\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:`   pub value: T,\\n`})]})}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:(0,e.jsxs)(n.span,{className:\\"token unchanged\\",children:[(0,e.jsx)(n.span,{className:\\"token line\\"}),(0,e.jsx)(n.span,{className:\\"token prefix unchanged\\",children:\\" \\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:`   pub left: Option<Box<BinaryTree<T>>>,\\n`})]})}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:(0,e.jsxs)(n.span,{className:\\"token unchanged\\",children:[(0,e.jsx)(n.span,{className:\\"token line\\"}),(0,e.jsx)(n.span,{className:\\"token prefix unchanged\\",children:\\" \\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:`   pub right: Option<Box<BinaryTree<T>>>,\\n`})]})}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token unchanged\\",children:(0,e.jsx)(n.span,{className:\\"token line\\"})}),`}\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"\\",\\"aria-hidden\\":!0,children:\\"\\\\u{1F973}\\"})}),`\\n`,(0,e.jsxs)(n.h2,{id:\\"converting-array-into-binary-tree\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#converting-array-into-binary-tree\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"Converting Array into Binary Tree\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Now that we have an automatic insertion with the \\",(0,e.jsx)(n.code,{children:\\"insert\\"}),` method, we can consider creating a balanced tree in a more convenient way.\\nFor example, I want to have something similar to `,(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/std/vec/struct.Vec.html#examples\\",children:(0,e.jsx)(n.code,{children:\\"Vec::from\\"})}),\\": an associated function \\",(0,e.jsx)(n.code,{children:\\"BinaryTree::from\\"}),\\" that takes in an array and returns a balanced \\",(0,e.jsx)(n.code,{children:\\"BinaryTree\\"}),\\".\\"]}),`\\n`,(0,e.jsx)(n.p,{children:\\"Let\'s write a test to visualize the use case better:\\"}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"create_new_tree_with_from\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"// `BinaryTree::from` takes in a reference of an array because borrowing is sufficient\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"from\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"[\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"]\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"To implement \\",(0,e.jsx)(n.code,{children:\\"BinaryTree::from\\"}),\\", we can simply iterate through the array and using the \\",(0,e.jsx)(n.code,{children:\\"insert\\"}),\\" method to create the tree structure.\\"]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"impl\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"from\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"new_values\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"[\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"]\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"first\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" rest\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" new_values\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"split_first\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"unwrap\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"first\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"for\\"}),\\" value \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"in\\"}),\\" rest \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`        root\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsx)(n.p,{children:\\"In the function, we created a root node from the first array element and then insert the rest element in the tree one by one.\\"}),`\\n`,(0,e.jsx)(n.p,{children:\\"If you try to test it, you\'ll see an error message like this:\\"}),`\\n`,(0,e.jsx)(\\"img\\",{src:\\"/optimized/articles/rust-binary-tree-insertion/error-copy-trait.webp\\",alt:\\"Test aborted because of the Copy Trait is not implemented\\",width:\\"100%\\",loading:\\"lazy\\"}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"We can fix it by specifying the type \\",(0,e.jsx)(n.code,{children:\\"T\\"}),\\" implements the \\",(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/std/marker/trait.Copy.html\\",children:(0,e.jsx)(n.code,{children:\\"Copy\\"})}),\\" trait.\\"]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-diff\\",children:(0,e.jsxs)(n.code,{className:\\"language-diff code-highlight\\",children:[(0,e.jsx)(n.span,{className:\\"code-line deleted\\",children:(0,e.jsxs)(n.span,{className:\\"token deleted-sign deleted\\",children:[(0,e.jsx)(n.span,{className:\\"token prefix deleted\\",children:\\"-\\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:` impl<T> BinaryTree<T> {\\n`})]})}),(0,e.jsxs)(n.span,{className:\\"code-line inserted\\",children:[(0,e.jsx)(n.span,{className:\\"token deleted-sign deleted\\",children:(0,e.jsx)(n.span,{className:\\"token line\\"})}),(0,e.jsxs)(n.span,{className:\\"token inserted-sign inserted\\",children:[(0,e.jsx)(n.span,{className:\\"token prefix inserted\\",children:\\"+\\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:` impl<T> BinaryTree<T>\\n`})]})]}),(0,e.jsx)(n.span,{className:\\"code-line inserted\\",children:(0,e.jsxs)(n.span,{className:\\"token inserted-sign inserted\\",children:[(0,e.jsx)(n.span,{className:\\"token line\\"}),(0,e.jsx)(n.span,{className:\\"token prefix inserted\\",children:\\"+\\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:` where\\n`})]})}),(0,e.jsx)(n.span,{className:\\"code-line inserted\\",children:(0,e.jsxs)(n.span,{className:\\"token inserted-sign inserted\\",children:[(0,e.jsx)(n.span,{className:\\"token line\\"}),(0,e.jsx)(n.span,{className:\\"token prefix inserted\\",children:\\"+\\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:`     T: Copy,\\n`})]})}),(0,e.jsx)(n.span,{className:\\"code-line inserted\\",children:(0,e.jsxs)(n.span,{className:\\"token inserted-sign inserted\\",children:[(0,e.jsx)(n.span,{className:\\"token line\\"}),(0,e.jsx)(n.span,{className:\\"token prefix inserted\\",children:\\"+\\"}),(0,e.jsx)(n.span,{className:\\"token line\\",children:` {\\n`})]})})]})}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"The reason is that the \\",(0,e.jsx)(n.code,{children:\\"insert\\"}),\\" method actually take ownership over \\",(0,e.jsx)(n.code,{children:\\"new_value\\"}),`.\\nIn order to keep the program memory save, the compiler didn\'t allow us to \\"move\\" the array elements into the `,(0,e.jsx)(n.code,{children:\\"insert\\"}),` method because the array might be referenced in other parts of the program.\\nSo what we can do is to pass in a copy (duplicate) of an array element.`]}),`\\n`,(0,e.jsx)(n.p,{children:\\"Now it should work!\\"}),`\\n`,(0,e.jsxs)(n.h2,{id:\\"final-thought\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#final-thought\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"Final Thought\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"That\'s it! The full implementation of our Binary Tree assertion is here\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"down arrow\\",children:\\"\\\\u2B07\\\\uFE0F\\"})]}),`\\n`,(0,e.jsx)(n.pre,{className:\\"language-rust\\",children:(0,e.jsxs)(n.code,{className:\\"language-rust code-highlight\\",children:[(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[derive(Debug, PartialEq)]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"struct\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token type-definition class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Option\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">>\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Option\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">>\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"impl\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"where\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Copy\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"/// Create a new Binary Tree node.\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"/// Create a balanced tree from an array reference.\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"from\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"new_values\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"[\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"]\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"first\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" rest\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" new_values\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"split_first\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"unwrap\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"first\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"for\\"}),\\" value \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"in\\"}),\\" rest \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            root\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`        root\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"/// Insert a tree node in the next available branch with breadth first traversal.\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" new_value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"VecDeque\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"VecDeque\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"push_front\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"loop\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"ref\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"ref\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"..\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"pop_back\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"unwrap\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"match\\"}),\\" left \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"push_front\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"left \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"new_value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"return\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"match\\"}),\\" right \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    queue\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"push_front\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=>\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),\\"right \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"new_value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"return\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"/// Insert a left child node.\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"left \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"/// Insert a right child node.\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token comment\\",children:\\"///\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"pub\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\":\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"<\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"T\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\">\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"->\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"Self\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"right \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Box\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"self\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[cfg(test)]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mod\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token module-declaration namespace\\",children:\\"tests\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"use\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"super\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"*\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"create_new_tree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert_left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"if\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"left \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"right\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert_right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"if\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"Some\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"right \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"node\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"value\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),\\"tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),\\"left\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"None\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"mut\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"insert\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token attribute attr-name\\",children:\\"#[test]\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"fn\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token function-definition function\\",children:\\"create_new_tree_from\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"{\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token keyword\\",children:\\"let\\"}),\\" tree \\",(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"=\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"from\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token operator\\",children:\\"&\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"[\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),\\" \\",(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"]\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\";\\"}),`\\n`]}),(0,e.jsx)(n.span,{className:\\"code-line\\",children:`\\n`}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token macro property\\",children:\\"assert_eq!\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            tree\\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\",\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"            \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"1\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                    \\",(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"2\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"4\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"5\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"                \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"right\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"3\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\".\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"left\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token class-name\\",children:\\"BinaryTree\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"::\\"}),(0,e.jsx)(n.span,{className:\\"token function\\",children:\\"new\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"(\\"}),(0,e.jsx)(n.span,{className:\\"token number\\",children:\\"6\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"        \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\")\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[\\"    \\",(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]}),(0,e.jsxs)(n.span,{className:\\"code-line\\",children:[(0,e.jsx)(n.span,{className:\\"token punctuation\\",children:\\"}\\"}),`\\n`]})]})}),`\\n`,(0,e.jsxs)(n.h2,{id:\\"reference\\",children:[(0,e.jsx)(n.a,{className:\\"anchor\\",href:\\"#reference\\",children:(0,e.jsx)(n.span,{className:\\"icon icon-link\\"})}),\\"Reference\\"]}),`\\n`,(0,e.jsxs)(n.ul,{children:[`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Binary_tree\\",children:\\"Binary Tree\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\\",children:\\"Balanced Binary Tree\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Breadth-first_search\\",children:\\"Breadth-First Search\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)\\",children:\\"Queue\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/std/option/\\",children:[\\"Rust \\",(0,e.jsx)(n.code,{children:\\"Option\\"}),\\" Type\\"]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/book/ch15-01-box.html\\",children:[\\"Rust \\",(0,e.jsx)(n.code,{children:\\"Box\\"}),\\" Pointer\\"]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/std/collections/struct.VecDeque.html\\",children:[\\"Rust \\",(0,e.jsx)(n.code,{children:\\"VecDequeue\\"})]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\\",children:[\\"Rust \\",(0,e.jsx)(n.code,{children:\\"PartialEq\\"}),\\" Trait\\"]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/std/marker/trait.Copy.html\\",children:[\\"Rust \\",(0,e.jsx)(n.code,{children:\\"Copy\\"}),\\" Trait\\"]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://doc.rust-lang.org/std/vec/struct.Vec.html#examples\\",children:[\\"Rust \\",(0,e.jsx)(n.code,{children:\\"Vec::from\\"})]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch05-03-method-syntax.html#associated-functions\\",children:\\"Rust Associated Function\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html\\",children:\\"Rust Ownership\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsxs)(n.a,{href:\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null\\",children:[\\"JavaSCript \\",(0,e.jsx)(n.code,{children:\\"null\\"})]})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"http://web.mit.edu/rust-lang_v1.25/arch/amd64_ubuntu1404/share/doc/rust/html/book/first-edition/the-stack-and-the-heap.html\\",children:\\"The Stack and the Heap\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://endler.dev/2017/boxes-and-trees/\\",children:\\"Of Boxes and Trees - Smart Pointers in Rust\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://www.reddit.com/r/rust/comments/ry34vr/problem_with_implementing_binary_tree_insertion/\\",children:\\"Problem with Implementing Binary Tree Insertion\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch06-01-defining-an-enum.html?highlight=option#the-option-enum-and-its-advantages-over-null-values\\",children:\\"The Option Enum and Its Advantages Over Null Values\\"})}),`\\n`,(0,e.jsx)(n.li,{children:(0,e.jsx)(n.a,{href:\\"https://doc.rust-lang.org/book/ch15-02-deref.html\\",children:\\"Treating Smart Pointers Like Regular References with the Deref Trait\\"})}),`\\n`]}),`\\n`,(0,e.jsx)(n.hr,{}),`\\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"speech balloon\\",children:\\"\\\\u{1F4AC}\\"}),\\" Comments on \\",(0,e.jsx)(n.a,{href:\\"https://www.reddit.com/r/rust/comments/s3u7fk/binary_tree_insertion_in_rust/\\",children:\\"Reddit\\"}),\\".\\"]}),`\\n`,(0,e.jsx)(n.hr,{}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Here you have it! Thanks for reading through\\",(0,e.jsx)(n.span,{role:\\"img\\",\\"aria-label\\":\\"raising hands\\",children:\\"\\\\u{1F64C}\\"})]}),`\\n`,(0,e.jsx)(n.p,{children:\\"If you find it useful, please share this article to help more people in their engineering journey.\\"}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"Feel free to connect with me on \\",(0,e.jsx)(n.a,{href:\\"https://twitter.com/dawchihliou\\",children:\\"twitter\\"}),\\"!\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"If you\'re interested in Unicode in Rust and JavaScript, I wrote an article \\",(0,e.jsx)(n.a,{href:\\"/articles/indexing-strings-in-rust-and-typescript\\",children:\'\\"Indexing Strings in Rust and TypeScript: A Case Study of String\\"\'}),`.\\nThere we discussed how Rust and JavaScript handle strings with a classic algorithm.`]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"If you\'re interested in writing a CLI with TypeScript and implementing a real-world CLI application with Google Lighthouse integration, check out my previous article \\",(0,e.jsx)(n.a,{href:\\"/articles/writing-your-own-typescript-cli\\",children:\'\\"Writing Your Own TypeScript CLI\\"\'}),\\".\\"]}),`\\n`,(0,e.jsxs)(n.p,{children:[\\"If you\'re wondering how to test Redux Observable, I wrote an article \\",(0,e.jsx)(n.a,{href:\\"https://itnext.io/better-marble-test-70c7676a1e2\\",children:\'\\"Writing Better Marble Tests for Redux Observable andTypeScript\\"\'}),` just for you.\\nIt\'s a comprehensive guide to walk you through the thought process.`]}),`\\n`,(0,e.jsx)(n.p,{children:\\"Happy coding!\\"})]});return s?(0,e.jsx)(s,Object.assign({},a,{children:c})):c}var y=w;return g;})();\\n;return Component.default;"},"_id":"articles/binary-tree-insertion-in-rust.mdx","_raw":{"sourceFilePath":"articles/binary-tree-insertion-in-rust.mdx","sourceFileName":"binary-tree-insertion-in-rust.mdx","sourceFileDir":"articles","bodyType":"mdx","flattenedPath":"articles/binary-tree-insertion-in-rust"},"type":"Article","readingTime":{"text":"11 min read","minutes":10.43,"time":625800,"words":2086},"wordCount":2088,"slug":"binary-tree-insertion-in-rust"}'
      )
    },
  },
])
